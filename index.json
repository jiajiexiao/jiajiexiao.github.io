[{"content":"In my previous post, I highlighted the growing influence and adoption of Artificial Intelligence (AI) and machine learning (ML) systems, discussing how they attain \u0026ldquo;intelligence\u0026rdquo; through a careful \u0026ldquo;data diet.\u0026rdquo; However, a fundamental challenge arises from out-of-distribution (OOD), posing barriers to robust performance and reliable deployment. In particular, covariate shift (eq 1) and concept drift (eq 2) are two major types of OOD frequently encountered in practice, demanding mitigation for robust model deployment.\n\\begin{equation} \\begin{aligned} \\text{Covariate shift:} \\quad P_\\text{S} (X) \\neq P_\\text{T} (X) \\end{aligned} \\end{equation}\n\\begin{equation} \\begin{aligned} \\quad \\text{Concept drift:} \\quad P_\\text{S} (Y | X) \\neq P_\\text{T} (Y | X) \\end{aligned} \\end{equation}\nIn this post, we delve into strategies to tackle OOD and enhance the robustness of AI/ML models.\n1. Baseline: Quality Control and Normalization In various discussions today, people often talk about data quality, batch/cohort effects, or \u0026ldquo;garbage in, garbage out\u0026rdquo;. These are actually quite relevant to robustness of your model. As a result, the first thing we should consider prioritizing is to establish quality control in your data generation/collection pipeline and to conduct data normalization. For scenarios prone to data biases (e.g., batch effects in biological experiments), designing control measurements becomes crucial for later data normalization. Quality control and normalization ensure that the data\u0026rsquo;s quality is suitable for model training and inference, and that the inputs are on comparable scales.\nFig 1. Quality control and normalization workflow adopt in digital pathology. Prostate (a) and lung (b) tissue images stained with hematoxylin and eosin were normalized against target images and evaluated by pathologists. Source image is from Fig2 in Michielli, et al (2022).\nFig. 1 illustrates a clinical workflow in digital pathology. Despite variance in stain levels and random artifacts, stain normalization significantly improves image quality and enhances clinical diagnostic confidence (Michielli, et al (2022)). When developing and deploying computer vision (CV)-based AI/ML systems for assisting pathologists, stain normalization and quality controls help mitigate covariate shifts in the stain images. In other words, after these data preprocessing steps, the marginal distribution of images in source and target domains becomes comparable. Consequently, OOD problems transform into IID ones.\n$$ \\text{Biases} \\xrightarrow{\\text{e.g. batch effects}} P_\\text{S} (X) \\neq P_\\text{T} (X) \\xrightarrow[\\text{QC}]{\\text{normalization}} P_\\text{S} (X\u0026rsquo;) = P_\\text{T} (X\u0026rsquo;) $$\n2. Domain Adaptation when Target Domain is Accessible 2.1 Instance-Reweighting Despite our efforts in quality control and normalization, covariate shifts may persist. Such situations often indicate selection bias, where samples from the source domain may not cover all possible feature distributions, failing to fully reflect the target domain. While acquiring less biased or more representative data seems intuitive, it can be prohibitively costly in terms of both money and time, often requiring cross-functional efforts over months to years. Consequently, computational tactics or mitigations become essential and may prompt inquiries from managers or even CxOs.\nTo address this, let\u0026rsquo;s begin by checking for any known information about the target domain. The observation of covariate shifts implies some knowledge about the target domain, such as the statistical distributions of features. This information becomes valuable for guiding the use of source domain data to build a model that performs well in the target domain. Such a goal is also known as domain adaptation, because the aim is to adapt the model trained on the source domain to generalize effectively in the target domain with different distributions.\nFig 2. Instance-reweighting adapts the classifier trained in source domain to generalize to target domain. Source images are from Jong (2017).\nInstance-reweighting is a domain adaptation method leveraging the target domain distribution. To illustrate, I just use the great examples from Johann de Jong\u0026rsquo;s blog. Fig. 2 displays the distributions of features x1, x2, labels of each data point, and learned and ground truth decision boundaries. Due to selection biases, the source domain exhibits different marginal distributions compared to the target domain (Fig. 2a). Training a classifier solely on source domain data yields a decision boundary diverging from the ground truth for the target domain (Fig. 2b). Instance-reweighting involves adjusting each training instance\u0026rsquo;s weight in the source domain to match the target domain distribution (Fig. 2c). This reweighted training significantly improves the learned decision boundary\u0026rsquo;s performance in the target domain. Instance-reweighting is widely adopted when instance-specific considerations are needed for model training and evaluation. For example, addressing problems with long-tailed distributions involves static reweighting (constant sample weights) or dynamic reweighting (e.g., via focal loss 1) to penalize minority groups more, resulting in more robust performance against rare events.\nIn summary, instance-reweighting aims to mitigate encountered covariate shifts by adjusting the sample distribution. With the reweighting scheme matching the target domain, the reweighted source domain distribution $P_\\text{S}\u0026rsquo; (X)$ aligns with the target domain distribution $P_\\text{T} (X)$.\n$$ \\text{Biases} \\xrightarrow{\\text{e.g. selection biases}} P_\\text{S} (X) \\neq P_\\text{T} (X) \\xrightarrow{\\text{reweighting}} P_\\text{S}\u0026rsquo; (X) = P_\\text{T} (X) $$\nThe additional knowledge used to derive the weights introduces some inductive bias for the model; thus, the accuracy of this additional knowledge about the target domain can be critical to the model\u0026rsquo;s robustness.\n2.2 Semi-Supervised Learning In addition to target domain statistics, if we have access to unlabeled data from the target domain, we can explore other domain adaptation methods leveraging the intrinsic structure behind the data to improve OOD performance. For instance, employing a semi-supervised learning algorithm allows incorporating unlabeled data from the target domain during model training. The initial model is trained based on the source domain data. Subsequently, this model is applied to the unlabeled target domain data to generate pseudo-labels for those unlabeled samples. Samples with confident pseudo-labels are selected as additional training data, and the model is retrained alongside the source domain samples. This iterative process refines the model, enhancing its performance in the target domain.\nFig 3. Semi-supervised learning aids domain aptation. (a) Massive unlabeled data representing the target domain is useful to overcome selection biases in the source domain and assist the model in generalizing to the target domain. (b) Pseudo-labeling algorithm iteratively augments the source domain data and regularizes the model training.\n2.3 Test-Time Training Additionally, Test-Time Training (TTT) (Sun, et al (2020)) can be explored even when there is no access to the target domain until running model testing. This technique introduces additional self-supervision tasks that can be applied to unlabeled data from the target domain. In an image classification task example as shown in Fig. 4, the model first projects the images into a latent space via an encoder. Then, the latent representation will be used for predicting the rotation angle of the images in addition to predicting the object label of the images. Self-supervised targets can be easily obtained since you know the angle at which the image is rotated in the data-augmentation process. During testing, we now have access to the target domain data as it is input for the model for making predictions. Each test image can be augmented via rotation and passed to the model for self-supervised learning. This self-supervised learning offers a chance to update the encoder based on the target domain, which learns how to project the target domain images into a comparable latent space relative to the source domain. This is the test-time training.\nFig 4. Test-Time Training. Source image is from the authors\u0026rsquo; page (link) of TTT (Sun, et al (2020)).\nBoth semi-supervised learning and test-time training alleviate covariate shifts by seeking data augmentation to get equivalent IID.\n$$ \\text{Biases} \\xrightarrow[\\text{batch effects}]{\\text{e.g. selection biases}} P_\\text{S} (X) \\neq P_\\text{T} (X) \\xrightarrow[\\text{self-supervised regularization}]{\\text{data augmentation}} P_\\text{S} (X\u0026rsquo;) = P_\\text{T} (X) $$\nWhile these are effective methods and tactics in many real-world applications, there may be other factors limiting their adoption. For example, in scenarios with strong regulations, such as when the deployed model needs to be fully locked and requires FDA approval, using the target domain data (e.g., clinical trial data and samples collected post-approval) to update the model may not be allowed or under regulation. For applications that require low latency in inference time, TTT may be too slow to be deployed. All these mitigations require domain-specific consideration before being pursued.\n2.4 Transfer Learning and Fine-Tuning When we have access to the target domain\u0026rsquo;s labeled data during model development stage, although it has a very limited sample size compared to the source domain, we can conduct transfer learning and fine-tuning to adapt the model to the new domain.\nTransfer learning aims to apply knowledge learned from one domain or one task to another related domain or task, where the knowledge is often encoded as learnable parameters in deep neural networks nowadays. The rationale behind transfer learning is that there is transferable knowledge across related domains and tasks. Thus, it is beneficial to start from the pre-trained network based on the source domain with lots of data, rather than training the network from scratch based on the target domain with a limited amount of data. Transfer learning typically freezes the parameters pre-trained based on the source domain but, on top of that, adds a few additional layers whose parameters are fitted based on the target domain.\nSimilarly, fine-tuning also starts from the same pre-trained network along with possible optional layers. However, in contrast to transfer learning 2, fine-tuning also updates the weights of the pre-trained network or a subset of its layers based on the target domain.\nFig 5. Domain adpation learns domain-invariant transformations and aligns domain distributions. Source image is from Fig. 1 in Choudhary2020, et al (2020), where domain adaptation is treated as a transductive transfer learning method. Here, this image illustrates the idea that covariate shift disappears once the different domains are aligned.\nEssentially, both transfer learning and fine-tuning adapt the parameters learned from the source domain and seek further minimum adjustments to make the source and target domains comparable in the projection space (i.e., latent space) of the features. Like other domain adaptation approaches we\u0026rsquo;ve seen previously, this mitigates the covariate shift and allows the model to generalize to the target domain (Fig. 5).\n$$ \\text{Related tasks or domains} \\xrightarrow{} P_\\text{S} (X) \\neq P_\\text{T} (X) \\xrightarrow[\\text{fine-tuning}]{\\text{transfer learning}} P_\\text{S} (X\u0026rsquo;) = P_\\text{T} (X\u0026rsquo;) $$\n3. Domain Generalization when Target Domain is Inaccessible So far, we have examined relatively simple OOD cases. However, more challenging scenarios can arise. In some instances, there might be no reliable prior information or even access to the target domain when training and locking the model for deployment. This challenge is often encountered in areas with limited training data and stringent regulations, where capturing a representative set becomes particularly difficult.\nMachine learning literature uses the term domain generalization to characterize the goal of building robust models for target domains that are entirely inaccessible during model development. This presents a more challenging but potentially more needed extension of domain adaptation.\nApart from covariate shift, another OOD challenge we haven\u0026rsquo;t addressed is concept drift. It can seem daunting when the relationships between features and labels differ in the target and source domains, and this shift is unknown until after building, selecting, and deploying the models. Well, performance degrade in shifted target domain may not be a big issue in low-stakes scenarios, just further train the model or retrain. However, it\u0026rsquo;s a common challenge in healthcare, where AI/ML-based or AI/ML-derived products must meet primary and secondary goals in clinical trials for disease diagnosis and treatment.\nSo, what can we do in these more difficult cases? Consider a scenario where high school students are only allowed to take the real SAT test once. They should be allowed to take as many mocks as they want, right? Would that be helpful? I guess the more closely the mocks can reflect the real test, the higher the chance to achieve similar performance in the actual exam 3. Similarly, in domain generalization, we still need to think about how we can make the source domain data more like the target domain.\nIn the realm of concept drift, the relationships between Y and X are subject to change. In reality, there can also be situations where both P(Y|X) and P(X) change across domains. The key question is whether there are features or projections of features that establish a stable relationship with target labels, regardless of the domains.\n3.1 Correlation vs Causality In our quest for a more stable relationship between features and targets, let\u0026rsquo;s revisit how AI/ML models are trained.\nModels utilize differences between model outputs and targets to update parameters. This leads to that fact that the model leverages the correlation between the features and targets to learn. A feature more correlated with the targets makes the model more likely to use it for predictions.\nFig 6. Correlation and causality. X and Y are two random variables that appear to be correlated. When digging into possible data generation process, it can be simplified as either they have a causal relationship or they have a common cause Z.\nHowever, correlation is not a stable causal relationship; it can be spurious for various reasons such as sample collection biases. According to Reichenbach\u0026rsquo;s common cause principle (Hitchcock2021), if we observe a correlation or association between two random variables, it means either one of the variables causes the other or there is a third variable that causes both (known as confounding) (Fig. 6). Causal relationships are more stable than correlation, as spurious correlations can easily change across domains or environments.\nFor instance, consider a predictive model trained on medical data in the source domain, where an attribute like \u0026ldquo;number of hospital visits\u0026rdquo; shows a high correlation with disease outcomes due to selection biases. This attribute might seem crucial in the source domain, but once the selection biases disappear in the target domain, the correlation weakens, and the attribute loses its predictive power for disease outcomes. This scenario resembles a concept drift, highlighting opportunities to address OOD by identifying domain-invariant components in features that have a (ideally) causal relationship with target labels.\n3.2 Multitask Learning and Adversarial Training To identify invariant components in features, classical approaches like feature selection and engineering might come to mind. These handcrafted pre-processing methods rely on additional prior knowledge and are often employed in statistical learning and settings with small training sizes. However, such prior knowledge, acting as an inductive bias, may limit further performance improvements. For more complex problems with reasonable training sizes, we need an end-to-end training framework to learn invariant components in features with a stable relationship to target labels.\nMultitask learning provides such a framework, allowing flexible representation learning. As depicted in the left part of Fig. 7, features can be encoded into a latent representation that predicts multiple attributes related to the main task (original target label) and auxiliary tasks (other attributes of sample instances). This facilitates the model to extract a more meaningful dense representation for predictions. Similar to Test-Time Training, well-designed auxiliary tasks can offer useful regularization on the networks, preventing overfitting on the main task.\nFig 7. Domain-adversarial training a neural network that learns both class and domain label. A neural network can be divided into encoding and decoding parts. The left side illustrates a feature extractor $G_f$ encoding inputs $X$ into latent features $f$. The right side shows latent features $f$ being decoded to predict class label $y$ and domain label $d$. While the loss $L_y$ for the class label is normally backpropagated to update the whole network, the loss $L_d$ for the domain label needs to be reversed when used for adversarial training the feature extractor. Source image is from Fig1 in Ganin, et al (2016).\nIn situations with biased attributes showing high correlation with the target label (confounding), it\u0026rsquo;s crucial for the network not to exploit such shortcuts. Adversarial training becomes relevant in this context, as it can explicitly penalize any direct or indirect use of biased attributes and confounders. The right-hand side of Fig. 7 illustrates the decoding part in multitask learning along with adversarial training. The latent feature is used to predict both class label and domain label. However, since the domain label may introduce confounding effects, one may want the constructed latent space to be less predictive of the domain label. Thus, the prediction loss for the domain label is reversed during backpropagation to the encoding layers. This process is known as adversarial training and can be effective in mitigating known biases in the source domain if being well tuned. See eq3 for exact gradient descent operation for the whole training process in math4.\n\\begin{equation} \\begin{align*} \\theta_{y} \u0026amp;= \\theta_{y} - \\eta \\frac{\\partial L_y}{\\partial \\theta_{y}} \\\\\\ \\theta_{d} \u0026amp;= \\theta_{d} - \\lambda \\frac{\\partial L_d}{\\partial \\theta_{d}} \\\\\\ \\theta_{f} \u0026amp;= \\theta_{f} - \\left( \\eta \\frac{\\partial L_y}{\\partial \\theta_{y}} - \\lambda \\frac{\\partial L_d}{\\partial \\theta_{d}} \\right) \\end{align*} \\end{equation}\nThrough these approaches, the goal is to find a more meaningful and less biased representation across domains, mitigating the concept drift issue.\n$$ \\text{Confounders, biases, etc} \\xrightarrow{} P_\\text{S} (Y|X) \\neq P_\\text{T} (Y|X) \\xrightarrow{} P_\\text{S} (Y|X\u0026rsquo;) = P_\\text{T} (Y|X\u0026rsquo;) $$\nUnlike domain adaptation seen previously, these approaches leverage previously ignored meta information that may reflect variance within the source domain itself. These methods don\u0026rsquo;t require access to the target domain at all, making them suitable for domain generalization. Moreover, they can be advantageous, especially when there\u0026rsquo;s no need for access to bias or sensitive attributes during inference in the target domain. On the flip side, these methods may involve more complex training and learning dynamics due to additional regularization terms.\n3.3 Causality-inspired Representation Disentanglement and Invariant Risk Minimization When performing representation learning, we can further ask if we can segregating a portion that holds more causal relevance to the target labels, and another portion that is closely associated with confounders or bias attributes. As discussed in the previous post of this series, a vision model trained on a source domain with images of cows on grassland may exhibit misclassification when confronted with a cow on ice (Causality2024). It\u0026rsquo;s obvious that the pixels of a cow should be a causal component for correct recognition of a cow while the pixels of background is related to the dataset biases (Fig. 8a).\nFig 8. Illustration for Representation Disentanglement. (a) An image of a cow standing on a grassland can be decomposed into a cow and the background of the class land. For image recognition of a cow, the pixels of the cow are the causal factor with an invariant relationship with the concept label of a cow, while the background is with spurious correlation with the label of a cow. (b) Illustration for how causality-inspired representation disentanglement may look like. Raw inputs $X^e$ are encoded into $X_{\\text{inv}}$ and $X_{\\text{spu}}$, which are invariant across domains/environments (denoted as $e$) and spuriously correlated to environments, respectively. $X_{\\text{inv}}$ and $X_{\\text{spu}}$ should be independent from each other conditionally on the original class label $Y$ and environment $e$. Later, $X_{\\text{inv}}$ and $X_{\\text{spu}}$ are decoded to $y_c$ and $y_e$ for predicting the original class of interest and domain/environment label, respectively. This results in three loss terms, covering prediction errors for $Y$ and $e$ and conditional independence requirements. Source image is from a talk given by Koyejo in 2023ICML.\nTo address this, we can design the neural network to encourage disentanglement of the latent representation based on a causality-inspired decomposition (Fig. 8b). This approach is similar to the multitask learning framework discussed in last section, with the distinction that the latent space is now divided into two components. A key enhancement involves introducing a regularization term to promote the conditionally independent disentanglement of these components. This additional regularization ensures the separation of domain-invariant and domain-specific components during training. With the domain-invariant (hopefully causal) component from the latent representation space, we can now find a more stable $P(Y|X)$ across domains, mitigating the concept drift challenge.\n$$ \\text{Confounders, biases, etc} \\xrightarrow{} P_\\text{S} (Y|X) \\neq P_\\text{T} (Y|X) \\xrightarrow{} P_\\text{S} (Y|X_{\\text{inv}}) = P_\\text{T} (Y|X_{\\text{inv}}) $$\nMoving beyond disentanglement, the pursuit of fostering the invariance of learned representations across diverse domains or environments is encapsulated in Invariant Risk Minimization (IRM) (Arjovsky, et al (2019)). In contrast to the conventional training approach solely focused on minimizing empirical risk, known as Empirical Risk Minimization (ERM), as illustrated in more details in previous post, IRM takes a step further. By minimizing the risk across different environments, IRM renders the model less sensitive to variations that are irrelevant to the causal factors. The result is a representation that not only disentangles causal and spurious components but also ensures the invariance of causal components across diverse domains, thereby fortifying the model\u0026rsquo;s generalization capabilities. While IRM may only present significant improvement over EMR in scenarios involving anti-causal data-generation process (Wang \u0026amp; Veitch (2023)), IMR itself is so intriguing and worth a separate blog post or series in the future.\n3.4 Multimodal Integration and Alignment We\u0026rsquo;ve covered various tactics to enhance OOD robustness in AI/ML models. Let\u0026rsquo;s delve into one more tactic: Multimodal Integration and Alignment. This approach might not be commonly mentioned when talking about OOD robustness, but it\u0026rsquo;s an emerging strategy that proves effective. Before exploring the details of how Multimodal Integration and Alignment contribute to robustness improvement, let\u0026rsquo;s examine an example as shown below.\nFig 9. A cow playing saxophone on ice. Images were generated DALL·E 3.\nFig. 9 was generated by DALL·E 3 after receiving a text prompt of \u0026ldquo;a cow playing saxophone on ice\u0026rdquo; (link). Remarkably, the model behind DALL·E 3 seems to accurately understand various concepts, such as the cow, saxophone, and ice. This is particularly impressive given the fact that various biases present in real-world data and what such a prompt describes doesn\u0026rsquo;t exist in reality. The ML model involved in this example integrates two modalities: vision and text (Betker, et al (2023)). These modalities are integrated and aligned to match each concept before generating images based on the prompt. While the image generation part is beyond the scope of this post, multimodal integration and alignment represent a crucial tactic for enhancing the robustness of AI/ML models.\nFig 10. Contrastive Language-Image Pre-training. Source image from Fig 1 in Radford, et al (2021).\nFig. 10 illustrates Contrastive Language-Image Pre-training (CLIP), the core technique enabling vision-language integration and alignment in DALL·E. To achieve multi-modal pre-training, various images and their corresponding captions pass through an image encoder and text encoder, respectively. These encoders extract and represent the summary of information from an image $i$ and a caption $j$ as latent vectors $I_i$ and $T_j$, respectively. Training involves making the latent vectors for paired image and caption inputs ($I_i$ and $T_i$) as similar as possible, while for non-paired inputs, the vectors should be as different as possible. This process aligns the vision latent space with the text latent space, employing a contrastive learning strategy discussed in \u0026ldquo;How AI/ML Models Learn\u0026rdquo; in the last post (Xiao (2023)). CLIP leverages rich information from each modality input, capturing invariant concepts embedded in the latent space of the two modalities. Consequently, CLIP mitigates the concept drift issue. With such a pre-trained latent space, one can further conduct few-shot learning or zero-shot prediction.\n3.5 Debiasing Training Tricks In the previously discussed tactics, gradient-based learning plays a significant role. Several training techniques exist to mitigate biases in models during training. For instance, if positive and negative samples are known to be sampled from biased attribute groups, a practical approach is to design a batch sampler ensuring that all positive and negative samples within a batch originate from the same bias group. By doing so, backpropagated gradients merely reflect the target attribute of interest rather than those bias attributes.\nHowever, when the bias attribute is unknown, alternative methods come into play. One strategy involves identifying bias groups based on the latent representations of samples during the learning process. By controlling learning dynamics or applying appropriate regularization according to the latent representations, the model can be adjusted to mitigate the adverse effects of spurious correlations between biased and target attributes. Given the length of this post, I recommend interested readers explore specific examples provided in references such as Yang2023, Hong2021 and Nam2020 for further insights into these debiasing techniques.\n4. Concluding Remarks: The Pas de Deux of Data and Models In this post, we explored various strategies to address out-of-distribution (OOD) challenges, encompassing both covariate shift and concept drift, in the pursuit of robust AI/ML models. Our discussion covered domain adaptation and domain generalization methods, considering scenarios with and without prior information about the target domain. At a high level, these strategies revolve around acquiring additional data or devising more suitable model training schemes.\nBefore concluding, it\u0026rsquo;s essential to reflect on the impact of data and model architecture on performance. The top panels in Fig. 11 illustrate different fitting conditions concerning model sizes. Panels A to C depict the classic bias and variance trade-offs, where the goal of statistical learning is to approach an ideal fit (i.e., ground truth) with a reasonable number of parameters. However, with the rise of deep neural networks and improved hardware capabilities, overparameterized models have become more prevalent (Panel D in Fig. 10). These models exhibit high learning capacity to directly fit every data point, showcasing the double-decent phenomenon (Nakkiran, et al. (2021)). This phenomenon challenges the conventional bias and variance tradeoff in statistical learning. However, what\u0026rsquo;s more important here is, this toy example suggests us two modeling options: ideal fit and direct fit when faced with data.\nFig 11. Double decent phenomenon and visualization of interpolation and extrapolation zoons. Source image from Fig. 1 in Hasson, et al (2020).\nMeanwhile, when comparing the generalization in this toy case with the known ideal fit, we implicitly evaluate the accuracy of the model\u0026rsquo;s interpolation 5 and extrapolation 6. Extrapolation is generally more challenging and less accurate than interpolation, and OOD is more likely to occur in the extrapolation zone (Fig. 11G). Thus, achieving reliable extrapolation is crucial for OOD robustness. When dealing with impoverished data, seeking an ideal fit model with potential help from prior knowledge and inductive biases is still an attractive approach, especially considering its potentially better extrapolation ability compared to a direct-fit model. However, for cases with abundant data, the learning capacity of an overparameterized model may be appreciated more. Such a direct-fit on big data results in a larger interpolation zone and a smaller extrapolation zone, contributing to model robustness by relying more on interpolation than extrapolation (Fig. 11F).\nOverall, for simple problems, an ideal fit model trained through appropriate learning strategies can provide reliable extrapolation for OOD. In more complex real-world problems, finding such an ideal fit model may be challenging. However, with rich data fed to overparameterized models, the interpolation zone becomes larger, and the model\u0026rsquo;s inability to extrapolate becomes less of a liability. This example underscores the complementary nature of models and data for generalization and robustness. Appreciating the pas de deux of data and models is crucial when building trustworthy AI/ML systems. Additionally, there are other requirements for trustworthy AI/ML, such as calibration/quality of uncertainty, fairness, explainability and transparency, and privacy, which will be explored in future discussions on the road to making model predictions trustworthy decisions.\nCitation If you find this post helpful and are interested in referencing it in your write-up, you can cite it as\nXiao, Jiajie. (Jan 2024). Toward Robust AI Part (2): How To Achieve Robust AI. JX\u0026rsquo;s log. Available at: https://jiajiexiao.github.io/posts/2024-01-06_how_robust_ai/.\nor add the following to your BibTeX file.\n@article{xiao2023howtoachieverobustai, title = \u0026#34;Toward Robust AI Part (2): How To Achieve Robust AI\u0026#34;, author = \u0026#34;Xiao, Jiajie\u0026#34;, journal = \u0026#34;JX\u0026#39;s log\u0026#34;, year = \u0026#34;2024\u0026#34;, month = \u0026#34;Jan\u0026#34;, url = \u0026#34;https://jiajiexiao.github.io/posts/2024-01-06_how_robust_ai/\u0026#34; } References Michielli, N., Caputo, A., Scotto, M., Mogetta, A., Pennisi, O. A. M., Molinari, F., \u0026hellip; \u0026amp; Salvi, M. (2022). Stain normalization in digital pathology: Clinical multi-center evaluation of image quality. Journal of Pathology Informatics, 13, 100145.\nJong, J. (2017). Transfer learning: domain adaptation by instance-reweighting. Retrieved Jan 06, 2024, from https://johanndejong.wordpress.com/2017/10/15/transfer-learning-domain-adaptation-by-instance-reweighting/.\nLin, T. Y., Goyal, P., Girshick, R., He, K., \u0026amp; Dollár, P. (2017). Focal loss for dense object detection. In Proceedings of the IEEE international conference on computer vision (pp. 2980-2988).\nSun, Y., Wang, X., Liu, Z., Miller, J., Efros, A., \u0026amp; Hardt, M. (2020, November). Test-time training with self-supervision for generalization under distribution shifts. In International conference on machine learning (pp. 9229-9248). PMLR.\nChoudhary, A., Tong, L., Zhu, Y., Mendelson, D., Rubin, D., Litjens, G., \u0026hellip; \u0026amp; Zhu, J. (2020). Advancing medical imaging informatics by deep learning-based domain adaptation. Yearbook of medical informatics, 29(01), 129-138.\nHitchcock, C., \u0026amp; Rédei, M. (2021). Reichenbach’s Common Cause Principle (E. N. Zalta, Ed.). Stanford Encyclopedia of Philosophy; Metaphysics Research Lab, Stanford University. https://plato.stanford.edu/entries/physics-Rpcc/\nGanin, Y., Ustinova, E., Ajakan, H., Germain, P., Larochelle, H., Laviolette, F., \u0026hellip; \u0026amp; Lempitsky, V. (2016). Domain-adversarial training of neural networks. Journal of machine learning research, 17(59), 1-35.\nCausality for Machine Learning. Chapter 3: Causality and Invariance, Retrieved December 17, 2024, from https://ff13.fastforwardlabs.com/#how-irm-works.\nKoyejo, S. (2023). On learning domain general predictors. https://icml.cc/virtual/2023/28441.\nArjovsky, M., Bottou, L., Gulrajani, I., \u0026amp; Lopez-Paz, D. (2019). Invariant risk minimization. arXiv preprint arXiv:1907.02893.\nWang, Z. \u0026amp; Veitch, V.. (2023). The Causal Structure of Domain Invariant Supervised Representation Learning. arXiv preprint arXiv:2208.06987.\nBetker, J., Goh, G., Jing, L., TimBrooks, †., Wang, J., Li, L., LongOuyang, †., JuntangZhuang, †., JoyceLee, †., YufeiGuo, †., WesamManassra, †., PrafullaDhariwal, †., CaseyChu, †., YunxinJiao, †., \u0026amp; Ramesh, A. (2023) Improving Image Generation with Better Captions.\nChen, W., Wang, W., Liu, L., \u0026amp; Lew, M. S. (2021). New ideas and trends in deep multimodal content understanding: A review. Neurocomputing, 426, 195-215.\nRadford, A., Kim, J. W., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., \u0026hellip; \u0026amp; Sutskever, I. (2021, July). Learning transferable visual models from natural language supervision. In International conference on machine learning (pp. 8748-8763). PMLR.\nXiao, Jiajie. (Dec 2023). Toward Robust AI Part (1): Why Robustness Matters. JX’s log. Available at: https://jiajiexiao.github.io/posts/2023-12-17_why_robust_ai/.\nHasson, U., Nastase, S. A., \u0026amp; Goldstein, A. (2020). Direct fit to nature: an evolutionary perspective on biological and artificial neural networks. Neuron, 105(3), 416-434.\nNakkiran, P., Kaplun, G., Bansal, Y., Yang, T., Barak, B., \u0026amp; Sutskever, I. (2021). Deep double descent: Where bigger models and more data hurt. Journal of Statistical Mechanics: Theory and Experiment, 2021(12), 124003.\nYang, Z., Huang, T., Ding, M., Dong, Y., Ying, R., Cen, Y., \u0026hellip; \u0026amp; Tang, J. (2023). BatchSampler: Sampling Mini-Batches for Contrastive Learning in Vision, Language, and Graphs. arXiv preprint arXiv:2306.03355.\nHong, Y., \u0026amp; Yang, E. (2021). Unbiased classification through bias-contrastive and bias-balanced learning. Advances in Neural Information Processing Systems, 34, 26449-26461.\nNam, J., Cha, H., Ahn, S., Lee, J., \u0026amp; Shin, J. (2020). Learning from failure: De-biasing classifier from biased classifier. Advances in Neural Information Processing Systems, 33, 20673-20684.\nFocal loss adds a modulating term to conventional cross-entropy loss, focusing learning on hard misclassified examples. It dynamically scales the cross-entropy loss during the training process to penalize hard misclassified samples more than others (Lin, et al (2017)).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nFine-tuning may be treated as a type of transfer learning method by people sometimes. By this definition, transfer learning can update the weights of the pre-trained model as well. As a result, the difference between transfer learning and fine-tuning becomes more blurred, and transfer learning and fine-tuning may be used interchangeably. I personally prefer to distinguish them a bit so that it can be clearer to readers how the training was actually done.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nOne may also think about toughening the mock exams more than the actual test. This approach ensures that achieving high performance in the mock exams translates to good or even better performance in the real test. But here, consistent performance in mock exams and real test is emphasized. Thus similarity between mocks and real test are desired.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n$\\eta$ and $\\lambda$ in eq3 are two learning rates that update different modules in the network.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nInterpolation is the process of estimating values within the range of known data points. In the context of machine learning, it refers to predicting or estimating values for data points that fall within the observed range of the training data.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nExtrapolation, on the other hand, involves predicting values for data points that extend beyond the range of the observed data. It\u0026rsquo;s an extension of the model\u0026rsquo;s predictions beyond the range of the training data.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://jiajiexiao.github.io/posts/2024-01-06_how_robust_ai/","summary":"In my previous post, I highlighted the growing influence and adoption of Artificial Intelligence (AI) and machine learning (ML) systems, discussing how they attain \u0026ldquo;intelligence\u0026rdquo; through a careful \u0026ldquo;data diet.\u0026rdquo; However, a fundamental challenge arises from out-of-distribution (OOD), posing barriers to robust performance and reliable deployment. In particular, covariate shift (eq 1) and concept drift (eq 2) are two major types of OOD frequently encountered in practice, demanding mitigation for robust model deployment.","title":"Toward Robust AI (2): How To Achieve Robust AI"},{"content":"Brilliant AI/ML Models Remain Brittle Artificial intelligence (AI) and machine learning (ML) have garnered significant attention for their potential to emulate, and sometimes surpass, human capabilities across diverse domains such as vision, translation, and planning. The popularity of groundbreaking models like ChatGPT and Stable Diffusion has fueled optimism, with many speculating not if, but when, Artificial General Intelligence (AGI) will emerge.\nYet, beneath the in silico surface, AI/ML systems remain at their core parametrized mathematical models. They are trained to transform inputs into predictive outputs, which includes tasks like classification, regression, media generation, data clustering, and action planning. Despite the awe-inspiring results, the deployment of even the most sophisticated models reveals a fundamental fragility.\nThis fragility becomes apparent in terms of unexpected or unreliable predictions. For example, you may have experienced or heard that a chatbot spewing gibberish instead of useful information. This phenomenon is called hallucinations, where the model generates text that is irrelevant or nonsensical concerning the given inputs and desired outputs. Such hallucinations are arguably inevitable in auto-regressive large language models (LLMs).\nThe implications of this fragility are profound, particularly in risk-sensitive applications. Errors from the AI/ML systems can have severe consequences. In healthcare, a misdiagnosis by an AI-powered diagnostic tool or test can lead to severe impacts on patient health and quality of life. Similarly, in autonomous vehicles, a computer vision system\u0026rsquo;s failure to accurately detect objects can result in fatal accidents.\nWhile AI/ML models often demonstrate impressive performance across numerous benchmarks during model development phases, these real-world errors persist. Degradation in performance, along with unforeseen errors, remains a significant challenge. As AI/ML technologies become increasingly integrated into society, the need for robust performance becomes paramount. The tremendous potential of AI/ML must be harnessed responsibly to ensure these models function reliably in the complex and dynamic real-world environment.\nThe Data Diet: How AI/ML Models Learn To understand why AI/ML models can stumble, we need to slightly peek under the hood at how they learn. Think of it like training a personal chef: you provide them with recipes and feedback (labels or rewards), and they gradually figure out how to transform ingredients (inputs) into delicious dishes (outputs). With this analogy, we\u0026rsquo;ll see how major types of AI/ML models learn as below.\nSupervised Learning: The most common approach, where you give the model both features (like image pixels) and labels (like \u0026ldquo;cat\u0026rdquo; or \u0026ldquo;dog\u0026rdquo;). The training process is to update the model parameters in order to reduce the error between the predicted outputs and the groundtruth labels. It\u0026rsquo;s like handing a chef a recipe book with labeled ingredients. While this method offers clarity and precision, acquiring annotated datasets can be costly.\nReinforcement Learning: A trial-and-error approach where the model explores and learns from rewards and punishments. Supervised learning also applies here, as the feedback from the reinforcement learning environment serves as labels, guiding the model to adjust its policy or value-action function for optimal long-term planning. Imagine a chef experimenting with different ingredient combinations without following a recipe and adjusting based on your reactions. That may be challenging since it requires you to taste all experimental dishes and share feedbacks.\nUnsupervised Learning: Unlike supervised learning that finds the relationship between features and labels, unsupervised learning aims to extract inherent structures or patterns from unlabeled data. It\u0026rsquo;s like a chef intuitively discerning flavor profiles and accumulating, free from the constraints of explicit recipes or examination of ingredient labels. Unsupervised methods present their own set of challenges, as models must decipher complex data structures based on simply feature values.\nSelf-Supervised Learning: Cleverly design proxy tasks that help models learn without explicit labels, like masking parts of an image or sentence and asking the model to fill in the blanks. Alternatively, one can also train the model to assess if two augmented versions of an input originate from the same base in the latent projection space, which is also called contrastive learning. These are like challenging a chef to identify mystery ingredients or create dishes from a limited pantry, which trains the chef to understand relationships among ingredients, recipes and dishes. Afterwards, the chef can likely handle more abstract or more creative meal requests from you. The self-supervised learning method eliminates the need for labeled data by using the inherent structure of the data itself, enabling the model to learn a (compressed) representation that captures intrinsic patterns within the inputs. As a result, self-supervised learning becomes more and more popular than classic unsupervised learning these days.\nRegardless of learning methods, in the training process, your AI chef is constantly adjusting their internal recipe book (model parameters) to improve their culinary skills. In other words, across these learning paradigms, a central tenet emerges: based on a set of training data, models continually adapt and refine their configurations, aiming to optimize alignment between their predictions and desired outcomes. But just like any human chef, they can be misled by faulty ingredients or biased information. Compared to the data used for model development, any discrepancies or shifts (i.e. so-called dataset shift (Hein2022)) in the distribution of data encountered during deployment may degrade performance. Unfortunately, as describing more in the next section, such dataset mismatch is common that results in AI/ML model fragility. We\u0026rsquo;ll delve deeper into these challenges, exploring the implications of distributional shifts and charting pathways to bolster AI model resilience.\nCommon yet Tricky Out-Of-Distribution We\u0026rsquo;ve seen that AI/ML models are taught to align the model outputs to desired targets based on a specific set of training data (Fig. 1). This training paradigm helps the model find \u0026ldquo;optimal\u0026rdquo; parameter values, ensuring accurate alignment between predictions and targets. However, the effectiveness of AI/ML models hinges on the similarity between the test data and the training data. In essence, the more congruent the test data is with the training data, the more reliable the model\u0026rsquo;s performance tends to be. This effectiveness pattern is common in machine learning practice.\nFig 1. Illustration of AI/ML Model Learning Process. AI/ML models, represented as parameterized hypothesis functions Hθ, transform inputs X into outputs Hθ(X). Through iterative training and optimization, the parameters θ are adjusted to minimize the discrepancy L between the model\u0026rsquo;s outputs and the target values Y.\nTo explore this phenomenon further, let\u0026rsquo;s delve into the terminologies commonly employed in contemporary literature. The dataset used for training is referred to as the source domain, while the dataset used for testing is termed the target domain (Kouw2018). These datasets are typically categorized as either Independent and Identically Distributed (IID) or Out-of-Distribution (OOD) (Hein2022). It\u0026rsquo;s crucial to understand that the effectiveness pattern mentioned earlier, rooted in a fundamental principle of PAC learning 1, assumes optimal consistency between the test data and the training data (Mohri2018). This alignment of data distribution, often referred to as the IID assumption when deploying predictive models, is a benchmark for reliable model performance. However, real-world scenarios often deviate from this idealized setting, presenting challenges in model generalization for OOD data. For instance, an AI model trained exclusively on standard bacterial DNA might misclassify a novel bacterial species, mistaking it for a known variant, rather than acknowledging uncertainty (Ren2019). Likewise, image classifiers may falter when presented with objects in unfamiliar poses or contexts that deviate from their training data (like a cow on ice (Causality2024)).\nFormally, IID and OOD are commonly defined by assessing the equality between the joint probability distributions of features and labels in both the source and target domains:\n\\begin{equation} \\begin{aligned} \\text{IID:} \\quad P_\\text{S} (X, Y) = P_\\text{T} (X, Y) \\end{aligned} \\end{equation}\n\\begin{equation} \\begin{aligned} \\text{OOD:} \\quad P_\\text{S} (X, Y) \\neq P_\\text{T} (X, Y) \\end{aligned} \\end{equation}\nThis joint distribution can be deconstructed into the conditional probability, denoted as P(Y|X), which encapsulates the relationship between inputs X and targets Y, and the marginal probability P(X), which focuses solely on inputs. OOD scenarios predominantly manifest in two distinct forms 2:\nCovariate Shift: The conditional probability holds fixed across domains but input marginal probabilities differ. This is probably the most prevalent type of for OOD. For example, training data may lack samples for a particular feature range observed at test-time and thus make it hard for the model to reliably infer unseen regimes. (see toy example in Fig2). Covariate shifts are often seen when there are some selection biases or there are batch effects on the data generation processes. Fig 2. Model Behavior under Covariate Shift. In the source domain, data points with x \u0026gt; 2 are absent, whereas the target domain features numerous such instances. Consequently, the model\u0026rsquo;s performance is compromised for x \u0026gt; 2 in the target domain.\nConcept Drift: The conditional probability between inputs and targets itself shifts across domains, even if input distributions look similar. Relationships learned during training fail to transfer (see toy example in Fig3). Concept drift can be seen when there are any changes in mechanistic changes in the data generation process that may be even harder to anticipate in advanced compared to covariate shifts. Fig 3. Model Behavior under Concept Drift. The relationship between x and y evolves across domains, rendering the previously learned model inadequate for the target domain.\nWhile the landscape of OOD encompasses various nuanced scenarios (e.g. both P(Y|X) and P(X) may vary across domains), these two categories cover most common situations. As illustrated in Figs 2 and 3, even basic examples of covariate shift and concept drift can pose challenges. From a mathematical standpoint, it\u0026rsquo;s established that IID ensures consistent performance across both source and target domains. However, achieving such consistency in an OOD context proves more challenging. In moe details, a hypothesis model ℎ\u0026rsquo;s empirical risk 3 in the target domain, denoted as \\( R_{\\text{T}}(h) \\) , can be estimated by the source domain loss ℓ weighted by the ratio between the joint distributions in the target and source domain as below:\n\\begin{equation} \\begin{align*} R_{\\text{T}}(h) \u0026amp;\\equiv \\sum_{y \\in Y_{\\text{T}}} \\int_{\\mathcal{X_{\\text{T}}}} \\ell(h(x), y) P_{\\text{T}}(x, y) dx \\\\\\ \u0026amp;= \\sum_{y \\in Y_{\\text{T}}} \\int_{\\mathcal{X_{\\text{T}}}} \\frac{\\ell(h(x), y) P_{\\text{T}}(x, y)}{P_{\\text{S}}(x, y)} P_{\\text{S}}(x, y) dx \\\\\\ \u0026amp;= \\sum_{y \\in Y_{\\text{T}}} \\int_{\\mathcal{X_{\\text{T}}}} \\ell(h(x), y) P_{\\text{S}}(x,y) \\frac{P_\\text{T}(x, y)}{P_\\text{S}(x, y)} dx \\\\\\ \u0026amp;\\approx \\frac{1}{n} \\sum_{i=1, x_i \\in \\mathcal{X_{\\text{S}}}, y_i \\in Y_{\\text{S}}}^{n} \\ell(h(x_i), y_i) \\frac{P_\\text{T}(x_i, y_i)}{P_\\text{S}(x_i, y_i)}. \\end{align*} \\end{equation}\nAs demonstrated by the equations above, achieving equality between the estimated target risk $\\widehat{R}_{\\text{T}}(h)$ and the estimated source risk \\( \\widehat{R}_{\\text{S}}(h) \\) typically requires \\( P_{\\text{T}}(x, y) = P_{\\text{S}}(x, y) \\) unless \\( \\ell_{\\text{T}}(h(x), y) = \\ell_{\\text{S}}(h(x), y) = 0 \\) .\nIn practice, while OOD scenarios are common, our goal remains: to achieve accurate and robust performance irrespective of whether we\u0026rsquo;re dealing with IID or OOD data. That is the requirement of robust AI/ML regardless of the IID or OOD. Consequently, the pursuit of designing AI/ML models that are resilient to a variety of OOD scenarios is crucial to ensure robust and dependable performance.\nSummary In wrapping up, this post has elucidated the foundational aspects of constructing compelling AI/ML models and shed light on the potential hurdles they encounter, particularly when confronted with OOD data. Understanding these challenges underscores the pressing need for robust AI. Ensuring that our AI systems can handle diverse and unexpected scenarios isn\u0026rsquo;t just a technical challenge—it\u0026rsquo;s crucial for their real-world applicability and trustworthiness. As we look ahead, bolstering AI\u0026rsquo;s resilience will be paramount. Join me in the forthcoming blog post, where we will explore in-depth strategies to fortify AI against these uncertainties and pave the way for more dependable and resilient machine learning solutions.\nCitation If you find this post helpful and are interested in referencing it in your write-up, you can cite it as\nXiao, Jiajie. (Dec 2023). Toward Robust AI Part (1): Why Robustness Matters. JX\u0026rsquo;s log. Available at: https://jiajiexiao.github.io/posts/2023-12-17_why_robust_ai/.\nor add the following to your BibTeX file.\n@article{xiao2023whyrobustness, title = \u0026#34;Toward Robust AI (1): Why Robustness Matters\u0026#34;, author = \u0026#34;Xiao, Jiajie\u0026#34;, journal = \u0026#34;JX\u0026#39;s log\u0026#34;, year = \u0026#34;2023\u0026#34;, month = \u0026#34;Dec\u0026#34;, url = \u0026#34;https://jiajiexiao.github.io/posts/2023-12-17_why_robust_ai/\u0026#34; } References Hein, M., Joaquin Quiñonero-candela, Sugiyama, M., Schwaighofer, A., \u0026amp; Lawrence, N. D. (Eds.). (2022). Dataset Shift in Machine Learning (Neural Information Processing). The MIT Press.\nMohri, M., Rostamizadeh, A. and Talwalkar, A. (2018) Foundations of Machine Learning. Cambridge, MA: The MIT Press. Chapter 2: The PAC Learning Framework, Available at: https://mitpress.ublish.com/ebook/foundations-of-machine-learning--2-preview/7093/9.\nKouw, W. M., \u0026amp; Loog, M. (2018). An introduction to domain adaptation and transfer learning. arXiv preprint arXiv:1812.11806.\nRen, J., Liu, P. J., Fertig, E., Snoek, J., Poplin, R., Depristo, M., \u0026hellip; \u0026amp; Lakshminarayanan, B. (2019). Likelihood ratios for out-of-distribution detection. Advances in neural information processing systems, 32.\nCausality for Machine Learning. Chapter 3: Causality and Invariance, Retrieved December 17, 2024, from https://ff13.fastforwardlabs.com/#how-irm-works.\nPAC learning stands for Probable Approximately Correct (PAC) learning framework, which is a foundational concept in computational learning theory that provides guarantees on the generalization performance of a learner.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe joint distribution of P(X, Y) can also be expressed in terms of P(X|Y) and P(Y). Thus, literature sometimes also mentions a third OOD scenario called label shift, meaning the P(Y) varies across domains while P(X|Y) stays stable.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nEmpirical risk is a measure of the average loss incurred by a hypothesis model ℎ on a given dataset. In simpler terms, it quantifies how well a hypothesis fits the observed data. In a broader sense, the risk of a hypothesis ℎ is the expected loss it will incur when applied to new, unseen data, drawn from the underlying distribution. This is a measure of how well the hypothesis generalizes to new data. The empirical risk serves as an estimate or proxy for the true risk. When we train a model on a finite dataset, we compute its empirical risk to assess its performance on that dataset (Kouw2018).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://jiajiexiao.github.io/posts/2023-12-17_why_robust_ai/","summary":"Brilliant AI/ML Models Remain Brittle Artificial intelligence (AI) and machine learning (ML) have garnered significant attention for their potential to emulate, and sometimes surpass, human capabilities across diverse domains such as vision, translation, and planning. The popularity of groundbreaking models like ChatGPT and Stable Diffusion has fueled optimism, with many speculating not if, but when, Artificial General Intelligence (AGI) will emerge.\nYet, beneath the in silico surface, AI/ML systems remain at their core parametrized mathematical models.","title":"Toward Robust AI (1): Why Robustness Matters"},{"content":"Greetings! This is JJ, and I am thrilled to welcome you to my corner of the internet! Taking inspiration from Lilian Weng, whose blog has been an invaluable resource during my studies and work in AI/ML, I\u0026rsquo;ve decided to also share my learning notes, thoughts, and updates through here.\nWhy Blogging? While I used to constantly write some diary during my childhood, I have to admit that I haven\u0026rsquo;t done so for quite a while. Blogging on this site, for me, it may be more than just a digital diary. I hope to crystallize my thoughts, document my learning experiences, and engage in meaningful conversations with readers.\nLearning from the Best In aspiring to emulate the dedication and passion that Lilian brings to her work, I\u0026rsquo;ve also been influenced by a conversation with Xingyou Song. Our discussion, held in front of DeepMind\u0026rsquo;s booth at 2023 ICML, encouraged me to consider blogging as a medium for sharing practical insights. In my employment history so far, publishing the research and development work that I lead and contribute has not been an organizational priority or highly restricted. I see blogging as a means to contribute to the research community while navigating the intricate landscape of addressing urgent medical needs, such as early cancer diagnosis and therapeutic intervention.\nWhat to Expect This blog is a personal expression and does not reflect the opinions or positions of my current or former employers. I am committed to avoiding any disclosure of sensitive information from my professional engagements. Despite these constraints, I\u0026rsquo;m enthusiastic to log a diverse mix of content, encompassing my learning and experiences in AI/ML, insights from the intersection of technology and science, and reflections on the challenges and triumphs of bridging these two dynamic worlds. I might also throw in some random, fun tidbits. Stay tuned!\n","permalink":"https://jiajiexiao.github.io/posts/2023-12-03_hello_world/","summary":"Greetings! This is JJ, and I am thrilled to welcome you to my corner of the internet! Taking inspiration from Lilian Weng, whose blog has been an invaluable resource during my studies and work in AI/ML, I\u0026rsquo;ve decided to also share my learning notes, thoughts, and updates through here.\nWhy Blogging? While I used to constantly write some diary during my childhood, I have to admit that I haven\u0026rsquo;t done so for quite a while.","title":"Hello World"},{"content":"Hi 👋, I'm Jiajie \"JJ\" Xiao. Thank you for visiting my personal website and taking an interest in my journey.\nI am passionate about contributing to a better world through the lens of science and technology. Currently, I serve as a Staff Machine Learning Scientist at Freenome, where I work on multi-domain (e.g. multiomics, EHR) models to facilitate sensitive and specific blood-based early cancer diagnosis. My expertise also extends to therapeutic development such as ML-guided protein design and drug discovery, gained through my experiences at GSK and WFU.\nI specialize in adapting state-of-the-art AI/ML advancements to navigate challenges posed by various types of high-dimensional and noisy data, thereby driving data-informed decision-making. Described as a fast learner, active researcher, and collaborative servant leader, I thrive on addressing complex, real-world problems with cross-functional teams. I am committed to using my expertise to make a positive impact on people\u0026rsquo;s lives.\nResearch Interests As a physicist with interest in mitigating human suffering from diseases, I came across multidisciplinary areas such computational biophysics, chemistry and biology. I have been investigating microscopic system through molecular dynamics studies as well as the macroscopic one in population-wise genomic discovery.\nMy journey into machine learning began in the middle of my PhD in Physics and has since become a focal point in my recent endeavors. Presently, my research is concentrated on applying advanced machine learning methodologies to tackle pressing medical challenges. I find joy in the process of researching on cutting-edge AI/ML and their applications that facilitate life-saving innovations. I am motivated by the potential impact of my research on AI4Science.\nMy AI/ML research areas include:\nDomain Generalization and Representation Learning Generative Modeling and Reinforcement Learning Interpretability and Safety ","permalink":"https://jiajiexiao.github.io/about/","summary":"Hi 👋, I'm Jiajie \"JJ\" Xiao. Thank you for visiting my personal website and taking an interest in my journey.\nI am passionate about contributing to a better world through the lens of science and technology. Currently, I serve as a Staff Machine Learning Scientist at Freenome, where I work on multi-domain (e.g. multiomics, EHR) models to facilitate sensitive and specific blood-based early cancer diagnosis. My expertise also extends to therapeutic development such as ML-guided protein design and drug discovery, gained through my experiences at GSK and WFU.","title":""}]