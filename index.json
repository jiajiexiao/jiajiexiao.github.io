[{"content":"The rapid advancements in Natural Language Processing (NLP) have showcased the versatility and efficacy of Large Language Models (LLMs). These models have demonstrated significant capabilities in compressing vast amounts of information through unsupervised or self-supervised training, enabling impressive few-shot and zero-shot learning performance. These attributes make LLMs particularly attractive for domains where generating extensive task-specific datasets is challenging, such as in biomedical applications. Recent attempts to apply LLMs in biomedical contexts have yielded promising results, highlighting their potential to address complex problems where data scarcity is a significant barrier. Starting from this post, I am planning to write a series on Biomedical Large Language Models (LLMs).\n1. General Introduction to LLMs LLMs are sophisticated deep learning models designed to understand and generate human language. They leverage vast datasets to learn the statistical properties of language, allowing them to generate coherent and contextually appropriate text. The development of LLMs has been significantly influenced by the introduction of the Transformer architecture (Fig. 1) by Vaswani et al. (2017), which enabled models to efficiently (relatively speaking) capture long-range dependencies in text through self-attention mechanisms. Subsequent models such as BERT (Bidirectional Encoder Representations from Transformers) by Devlin et al. (2019) and GPT (Generative Pre-trained Transformer) by Radford et al. (2018) have set new benchmarks in NLP, demonstrating state-of-the-art performance across various tasks.\nFig 1. Transformer Architecture.. The nice illustration is from D2l.ai.\n2. Training Large Language Models The training of LLMs involves multiple methodologies designed to enhance their language understanding and generation capabilities. The primary training schemes include:\n2.1 Autoregressive Language Modeling (ALM) Autoregressive language modeling involves training the model to predict the next word in a sequence based on the preceding words:\n\\begin{equation} \\begin{aligned} \\pi_\\theta (\\mathbf{y} \\mid \\mathbf{x}) = \\prod_{t} \\pi_\\theta (y_t \\mid \\mathbf{x}, \\mathbf{y}_{\u0026lt;t}), \\end{aligned} \\end{equation}\nwhere $y_t$ is the $t^{\\text{th}}$ token in the response and $y_{\u0026lt;t}$ is tokens in the response before $y_t$, $x$ are optional inputs as conditional generation and $\\pi_\\theta$ is the policy parameterized by $theta$ for the LLM model.\nThis approach, utilized by GPT models, enables the generation of text in a sequential manner, ensuring coherence and contextual relevance (Radford et al. 2018). This approach is more and more popular these days. One of the reasons for this trend is not just for the generative capabilities of LLMs, but also because of the belief/hypothesis that the model must be capable understand the language of the world so it can generate coherent and contextually appropriate text. This reminds me of a quote from Richard Feynman on his blackboard at the time of death:\n\u0026ldquo;What I cannot create, I do not understand. \u0026quot; \u0026mdash; Richard P. Feynman\n2.2 Masked Language Modeling (MLM) Masked language modeling, employed by models such as BERT, involves masking certain words in a sentence and training the model to predict these masked words based on the surrounding context.\n\\begin{equation} \\begin{aligned} p(y_{\\text{masked}} \\mid y_{\\text{unmasked}}) = g \\circ f(y_{\\text{unmasked}}), \\end{aligned} \\end{equation}\nwhere $y$ are the tokens, $f$ represents the contextualized embeddings of the unmasked tokens and $g$ is linear probing followed by a softmax operation that returns the probabilities of masked tokens being particular tokens in the context, i.e. $p(y_{\\text{masked}} \\mid y_{\\text{unmasked}})$.\nThis fill-in-the-blank Cloze task in a bidirectional training fashion allows the model to capture contextualized representation of the inputs, leading to improved performance on a range of NLP tasks (Devlin et al., 2019).\n2.3 Other Training Schemes It\u0026rsquo;s worth noting that there are additional training tasks in BERT except for the masked language modeling task. BERT also has a pre-training task that involves next sentence prediction (NSP) task that is used to train the model to predict whether two segments are adjacent to each other in a document. This task aims to learn the relationships between segments for downstream tasks such as summarization and question answering that require reasoning about the relationships between pairs of sentences. However, there are other studies showing removing the NSP task can match or slightly improve the downstream tasks (Liu, et al. 2019).\nOther notable training schemes include sequence-to-sequence learning, as implemented in models like T5 (Text-to-Text Transfer Transformer) (Raffel et al., 2020). This approach involves training the model to convert one sequence of text into another. The multitask settings makes it versatile for tasks such as translation, summarization, and question answering.\nMoreover, as I plan to write about later, diffusion models have also been explored in LLMs (Singh, et al. 2023, Wang, et al. 2024). These models iteratively transform a simple noise distribution into a complex data distribution, effectively learning to reverse a diffusion process. This technique, although more common in image generation tasks, is being explored for text generation to enhance the diversity and quality of generated sequences.\n3. Typical LLM Frameworks LLMs are built using various architectural frameworks, each typically severing for different purposes. The most prevalent frameworks include:\n3.1 Encoder-Decoder Architectures The encoder-decoder framework, exemplified by models like T5 (Raffel et al., 2020) and BART (Bidirectional and Auto-Regressive Transformers) (Lewis et al., 2020), involves an encoder to process the input text and a decoder to generate the output text. This architecture is particularly effective for tasks that require text transformation, such as translation and summarization.\n3.2 Encoder-Only Architectures Encoder-only models, such as BERT, focus on understanding the input text. These models are optimized for tasks like text classification, named entity recognition, and question answering, where comprehending the input context is crucial (Devlin et al. (2019)). Therefore, encoder-only models are typically used as representation learning for various downstream tasks.\n3.3 Decoder-Only Architectures Decoder-only models, such as GPT, are designed for text generation tasks. They excel at producing coherent and contextually relevant text, making them suitable for applications in language modeling, text completion, and creative writing (Radford et al. 2018).\n3.4 Other Structures Beyond these standard frameworks, ongoing research continues to explore new architectures and training methodologies to enhance LLM capabilities. Hybrid models and multimodal models, which integrate text with other data types (e.g., images, audio) (Radford, et al. 2021), represent cutting-edge advancements in the field.\n4. Employing Pre-Trained LLMs Pre-trained LLMs serve as foundation models that can be employed for specific tasks using several techniques, starting with zero-shot approaches and moving towards more customized fine-tuning methods.\n4.1 Prompting Prompting involves crafting specific input prompts to guide the model\u0026rsquo;s output. This technique leverages the model\u0026rsquo;s pre-existing knowledge and can be used to elicit specific information or perform particular tasks. Effective prompting can significantly enhance the model\u0026rsquo;s performance on a wide range of tasks without additional fine-tuning that updates the LLM itself. Prompting is particularly effective with autoregressive language models (ALMs) and models with a decoder architecture, such as GPT.\nExample: Consider a pre-trained language model being used in the context of prompting. The input sentence is: \"Tell me a story about poison apple.\" With prompting, the model uses this input to generate a continuation based on its pre-trained knowledge, producing an output such as: \"Once upon a time, in a faraway kingdom, there lived a beautiful princess who...\" Here, the model utilizes its extensive training data to create coherent and contextually appropriate text without additional fine-tuning. 4.2 Instruction Learning Instruction learning involves providing the model with explicit instructions within the input text to perform a specific task. This method allows the model to understand and execute complex tasks by interpreting the given instructions. Instruction learning is particularly useful for tasks requiring precise control over the model\u0026rsquo;s behavior and is suitable for models with decoder components.\nExample: Consider a pre-trained language model being adapted through instruction learning. The instruction is: \"Here is a Chinese sentence that is often used to say Hi. Translate it to English: '你吃了吗?'\" With instruction learning, the model uses this directive to perform a specific task, generating the output: \"Hello, how are you?\" In this case, the model is fine-tuned on a dataset of translation pairs to follow explicit instructions for translating text between languages. 4.3 In-Context Learning In-context learning allows the model to learn tasks by providing examples within the input context, without additional training. This method leverages the model\u0026rsquo;s ability to infer patterns and relationships from the provided examples, enabling it to perform new tasks based on the contextual information alone. This approach works well with models that have a decoder component.\nExample: Consider a pre-trained language model using in-context learning. The model is given the following context: \"Q: What is the capital of France? A: Paris. Q: What is the capital of Germany?\" With in-context learning, the model uses this context to infer the pattern and generate the appropriate continuation: \"A: Berlin.\" Here, the model leverages the provided examples to predict the answer to the new question based on the pattern observed in the context. 4.4 Vocabulary Extension Vocabulary extension involves adding new tokens to the model\u0026rsquo;s existing vocabulary to better handle domain-specific terminology. This is crucial in fields like biomedicine, where specialized terms frequently appear that were not part of the original corpus (i.e., out-of-vocabulary). The process typically involves:\nUpdating the Tokenizer: Include new tokens by training a new tokenizer on the domain-specific corpus and merging its vocabulary with the existing one. Modifying the Embedding Layer: Resize the embedding matrix to accommodate the new tokens and initialize their embeddings, either randomly or using informed methods. Fine-tuning the Model: Adjust the new embeddings and model parameters by fine-tuning the model on the new domain corpus. Evaluating the Model: Ensure the model effectively handles the new tokens by evaluating it on a validation set from the new domain and making necessary adjustments. This process enables the LLM to understand and generate text in specialized domains effectively.\nApart from extending the vocabulary and fine-tuning a pre-trained LLM, other strategies like feature fusion can handle unknown tokens in specific domains. Feature fusion involves adding additional features to the embeddings of known tokens. This can include using pre-trained embeddings from various sources or incorporating domain-specific information. For example, when working with LLMs trained on DNA sequences, methylation status may be available in the target domain corpus but not in the original training corpus. By combining these different types of features, the model\u0026rsquo;s performance is enhanced, especially in handling domain-specific terminology.\n4.5 Supervised Fine-Tuning Supervised fine-tuning (SFT) involves continuing the training of a pre-trained model using domain-specific or task-specific data. This process adjusts the model parameters to better suit the nuances of the new domain or new task. For example, a pre-trained LLM might be fine-tuned on a dataset of clinical notes to improve its ability to understand and generate medical text, significantly enhancing its performance on specialized tasks. SFT can be employed for both GPT-style and BERT-style LLMs.\n4.6 Alignment via RFHF Alignment through reinforcement learning from human feedback (RFHF) aims to fine-tune the unsupervised LMs to align the model\u0026rsquo;s outputs with human values and preferences, ensuring that the generated responses are accurate, ethical, and contextually appropriate (Ziegler, et al. 2019, Ouyang, et al. 2022). In this approach, human feedback is used to reward or penalize the model\u0026rsquo;s predictions, guiding it to produce more desirable and reliable outputs. This method is particularly useful for ensuring that LLMs generate responses that are not only accurate but also ethically and contextually appropriate.\nTo obtain human feedback, additional data called comparison data that show different human rankings on different model outputs given the same input. Such a comparison data will be used to build a reward model as human evaluators. Human evaluators review the model\u0026rsquo;s outputs and provide feedback, which is used to adjust the model\u0026rsquo;s parameters as fine-tuning via minimize the following loss:\n\\begin{equation} \\begin{aligned} \\mathcal{L_r(\\pi_t)} = -\\mathbb{E}_{x \\sim p_d, y \\sim \\pi_t} \\left[ r(x, y) - \\beta \\log \\frac{\\pi_t(y \\mid x)}{\\pi_r(y \\mid x)} \\right], \\end{aligned} \\end{equation}\nwhere $r$is the reward function reflecting human preferences in the comparison data$p_d$. $\\pi_r$ is the original reference model used for regularizing $\\pi_t$ with Kullback–Leibler divergence. $\\beta$ is the hyperparameter for controlling the regularization strength. The objective here is to get large reward without deviating from the original reference LLM too much.\nTo optimize eq 3 for human preference alignment, there are several approaches broadly categorized into reward-based methods like Proximal Policy Optimization (PPO) (Ouyang, et al. 2022) and reward-free methods like Direct Preference Optimization (DPO) (Rafailov, et al. 2024) and Self-Play Preference Optimization (SPPO) (Wu, et al. 2024).\n4.6.1 PPO After a reward model $r_\\phi$ is constructed using the human-labeled comparison data, eq 3 can be explicitly optimized with online RL algorithms. PPO is a policy gradient method in RL algorithm designed to stabilize training by using a clipped objective function (Schulman, et al. 2017). Compared to other RL algorithms, the key idea for PPO is to update the policy in small steps to prevent large deviations from the previous policy, which can lead to instability.\n4.6.2 DPO Direct Preference Optimization (DPO) simplifies RFHF by directly optimizing preference probabilities without training a separate reward model (Rafailov, et al. 2024). It leverages the log-likelihood ratio of preferred responses to non-preferred ones. The DPO loss function is:\n\\begin{equation} \\begin{aligned} \\mathcal{L_{\\text{DPO}}}(\\pi_t; \\pi_r) = -\\mathbb{E}_{(x,y_w,y_l) \\sim \\mathcal{D}} \\left[ \\log \\sigma \\left( \\beta \\log \\left( \\frac{\\pi_t(y_w | x)}{\\pi_r(y_w | x)} \\right) - \\beta \\log \\left( \\frac{\\pi_t(y_l | x)}{\\pi_r(y_l | x)} \\right) \\right) \\right], \\end{aligned} \\end{equation}\nwhere $y_w$ and $y_l$ are the preferred and less preferred responses given the input $x$, respectively, $\\sigma$ is the sigmoid function and $\\beta$ is a scaling parameter. This method directly targets the improvement of preference probabilities, which can lead to more stable and efficient training compared to methods requiring a reward model.\nDPO avoids the complexity and potential biases introduced by training a separate reward model. It aligns the language model with human preferences through a straightforward optimization process. However, DPO might struggle with data sparsity and non-transitive preferences, which can limit its effectiveness in some scenarios.\n4.6.3 SPPO Self-Play Preference Optimization (SPPO) formulates the alignment problem as a two-player constant-sum game, aiming to find the Nash equilibrium policy that consistently aligns with human preferences (Wu, et al. 2024). SPPO uses a self-play mechanism to iteratively refine the model by generating responses and evaluating them using a pre-trained preference model. The policy update is given by:\n\\begin{equation} \\begin{aligned} \\pi_{t+1}(y | x) \\propto \\pi_t(y | x) \\exp \\left( \\eta P(y \\succ \\pi_t | x) \\right), \\end{aligned} \\end{equation}\nwhere $P(y \\succ \\pi_t | x) = \\mathbb{E}_{y\u0026rsquo; \\sim \\pi_t(\\cdot | x)}[P(y \\succ y\u0026rsquo; | x)]$ is the winning probability.\nThe SPPO loss function ensures that the policy iteratively improves by fitting the log-probabilities of the model’s responses to the empirical winning probabilities. This approach effectively handles intransitive and irrational human preferences by directly working with preference probabilities, which cannot be trivially achieved by symmetric pairwise loss functions like DPO. SPPO was shown significant improvements in alignment tasks, outperforming iterative DPO and other methods (e.g. Identity Preference Optimization IPO) in various benchmarks without the need for external supervision.\n4.7 Efficient Fine-Tuning As the size of foundational LLMs (Large Language Models) today is typically quite large, fine-tuning these models can be computationally challenging. Efficient fine-tuning techniques aim to reduce the computational resources required for fine-tuning large models. This enables large language models to be adapted to specific tasks with significantly reduced computational costs, making them more accessible and practical for a broader range of applications.\nA few common Parameter-Efficient Fine-Tuning (PEFT) methods are briefly described below.\nFig 2. Model architectures for different adaptation. (a) Prefix-Tuning, (b) LoRA,(c) Series Adapter, and (d) Parallel Adapter. The chart is the Fig. 1 from Hu, et al. 2023. Using this fig here for illustration purpose.\n4.7.1 Low-Rank Adaptation (LoRA) Low-Rank Adaptation (LoRA) reduces the number of trainable parameters by learning low-rank updates to the pre-trained weights. This method adapts only a small subset of the model\u0026rsquo;s parameters, allowing for quick and resource-efficient updates. LoRA is particularly useful in scenarios with limited computational resources.\nThe key idea behind LoRA is to approximate the weight update matrix $\\Delta W$ using two lower-rank matrices $A$ and $B$:\n\\begin{equation} \\begin{align*} W = W + \\Delta W \\\\\\ \\Delta W = A \\times B, \\end{align*} \\end{equation}\nwhere $A \\in \\mathbb{R}^{d \\times r}$ and $B \\in \\mathbb{R}^{r \\times k}$, with $r$ being much smaller than the original dimensions $d$ and $k$. This approximation reduces the number of parameters from $d \\times k$ to $d \\times r + r \\times k$.\nFig 2. LoRA. Imagine a visual representation showing the original large matrix $W$ and its low-rank approximation through matrices $A$ and $B$. The GIF is from HuggingFace. I recommend checking the link for more information about hte adapters.\n4.7.2 Adapter Modules Adapter modules involve adding small, trainable layers between the layers of a pre-trained model 1. These adapters can be fine-tuned for specific tasks without altering the original model parameters. This approach significantly reduces the amount of training data and computational power required compared to full fine-tuning.\nMathematically, if $h$ is the hidden state of a layer, an adapter module can be represented as:\n\\begin{equation} \\begin{aligned} h\u0026rsquo; = h + f_{\\text{adapter}}(h), \\end{aligned} \\end{equation}\nwhere $f_{\\text{adapter}}$ is a lightweight feed-forward network with a bottleneck architecture, typically much smaller than the original layer. Please read Fig 2 (c \u0026amp; d) for checking series abd parallel adapters, two common ways to place the adapters:\n4.7.3 Prefix-Tuning Prefix-tuning involves learning a small continuous vector, or \u0026ldquo;prefix,\u0026rdquo; that is prepended to the input sequence (Fig 2(a)). This prefix is fine-tuned while the rest of the model\u0026rsquo;s parameters remain fixed. Prefix-tuning allows the model to adapt to new tasks efficiently, leveraging the pre-trained model\u0026rsquo;s capabilities with minimal additional computation.\nGiven an input sequence $x = [x_1, x_2, \\ldots, x_n]$, prefix-tuning modifies it to:\n$x\u0026rsquo; = [p_1, p_2, \\ldots, p_m, x_1, x_2, \\ldots, x_n]$, where $[p_1, p_2, \\ldots, p_m]$ are the learned prefix vectors.\nExample: Consider a pre-trained language model being adapted to a specific task, such as sentiment analysis. The original input sentence is: \"I had a great day at the park.\" With prefix-tuning, a learned prefix is prepended to this input: $[p_1, p_2, p_3, p_4, p_5]$ + \"I had a great day at the park.\" Here, $[p_1, p_2, p_3, p_4, p_5]$ are the learned prefix vectors. During fine-tuning, only these prefix vectors are updated while the rest of the model's parameters remain fixed. This allows the model to adapt to the sentiment analysis task using minimal additional computation. 4.7.4 Other Parameter-Efficient Fine-Tuning Techniques Other PEFT techniques focus on modifying only a subset of the model\u0026rsquo;s parameters or applying quantization techniques to reduce computational overhead. These methods maintain model performance while minimizing the resources needed for fine-tuning. Some examples are:\nBitFit (Zaken, et al. 2021): Only the bias terms of the model are fine-tuned. Mathematically, for a weight matrix $W$ and bias $b$, only $b$ is updated:\n$W\u0026rsquo; = W$\n$b\u0026rsquo; = b + \\Delta b$\nQAT (Quantization Aware Training) (Liu, et al. 2023): Quantization Aware Training applies quantization during training, which reduces the precision of the model parameters, leading to lower computational requirements.\n5. Plans for this Series Subsequent posts in this series will delve into specific applications of LLMs in the biomedical domain. The planned topics include:\nGenomic/DNA Language Models: Covering general genomic applications, including DNA sequence analysis, and introducing specialized models like Geneformer. Protein Language Models: Exploring the use of LLMs in understanding protein structures and functions. RNA and Single-cell Language Models: Combining RNA language models with single-cell analysis models like sc-GPT to explore their roles in gene expression and cellular heterogeneity. Chemistry Language Models: Highlighting the role of LLMs in chemical research, including drug discovery and molecular analysis. Other Biomedical LLMs: Discussing models for medical imaging, generalized biological understanding through multimodal data integration, and other emerging applications in the biomedical field. While this intro post focuses on some general intro to LLMs, I look forward to more exploration of how LLMs are transforming biomedical research and applications in the coming posts of this series.\nCitation If you find this post helpful and are interested in referencing it in your write-up, you can cite it as\nXiao, Jiajie. (May 2023). Biomedical LLMs: Intro. JX\u0026rsquo;s log. Available at: https://jiajiexiao.github.io/posts/2024-05-10_biollm_intro/.\nor add the following to your BibTeX file.\n@article{xiao2024_biollm_intro, title = \u0026#34;Biomedical LLMs: Intro\u0026#34;, author = \u0026#34;Xiao, Jiajie\u0026#34;, journal = \u0026#34;JX\u0026#39;s log\u0026#34;, year = \u0026#34;2024\u0026#34;, month = \u0026#34;May\u0026#34;, url = \u0026#34;https://jiajiexiao.github.io/posts/2024-05-10_biollm_intro/\u0026#34; } References Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., \u0026hellip; \u0026amp; Polosukhin, I. (2017). Attention is all you need. Advances in neural information processing systems, 30.\nDevlin, J., Chang, M. W., Lee, K., \u0026amp; Toutanova, K. (2018). Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805.\nRadford, A., Narasimhan, K., Salimans, T., \u0026amp; Sutskever, I. (2018). Improving language understanding by generative pre-training. OpenAI.\nLiu, Y., Ott, M., Goyal, N., Du, J., Joshi, M., Chen, D., \u0026hellip; \u0026amp; Stoyanov, V. (2019). Roberta: A robustly optimized bert pretraining approach. arXiv preprint arXiv:1907.11692.\nRaffel, C., Shazeer, N., Roberts, A., Lee, K., Narang, S., Matena, M., \u0026hellip; \u0026amp; Liu, P. J. (2020). Exploring the limits of transfer learning with a unified text-to-text transformer. Journal of machine learning research, 21(140), 1-67.\nMukul Singh, José Cambronero, Sumit Gulwani, Vu Le, Carina Negreanu, and Gust Verbruggen. 2023. CodeFusion: A Pre-trained Diffusion Model for Code Generation. In Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, pages 11697–11708, Singapore. Association for Computational Linguistics.\nWang, X., Zheng, Z., Ye, F., Xue, D., Huang, S., \u0026amp; Gu, Q. (2024). Diffusion Language Models Are Versatile Protein Learners. arXiv preprint arXiv:2402.18567.\nLewis, M., Liu, Y., Goyal, N., Ghazvininejad, M., Mohamed, A., Levy, O., \u0026hellip; \u0026amp; Zettlemoyer, L. (2019). Bart: Denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension. arXiv preprint arXiv:1910.13461.\nRadford, A., Kim, J. W., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., \u0026hellip; \u0026amp; Sutskever, I. (2021, July). Learning transferable visual models from natural language supervision. In International conference on machine learning (pp. 8748-8763). PMLR.\nZiegler, D. M., Stiennon, N., Wu, J., Brown, T. B., Radford, A., Amodei, D., \u0026hellip; \u0026amp; Irving, G. (2019). Fine-tuning language models from human preferences. arXiv preprint arXiv:1909.08593.\nOuyang, L., Wu, J., Jiang, X., Almeida, D., Wainwright, C., Mishkin, P., \u0026hellip; \u0026amp; Lowe, R. (2022). Training language models to follow instructions with human feedback. Advances in neural information processing systems, 35, 27730-27744.\nSchulman, J., Wolski, F., Dhariwal, P., Radford, A., \u0026amp; Klimov, O. (2017). Proximal policy optimization algorithms. arXiv preprint arXiv:1707.06347.\nRafailov, R., Sharma, A., Mitchell, E., Manning, C. D., Ermon, S., \u0026amp; Finn, C. (2024). Direct preference optimization: Your language model is secretly a reward model. Advances in Neural Information Processing Systems, 36.\nWu, Y., Sun, Z., Yuan, H., Ji, K., Yang, Y., \u0026amp; Gu, Q. (2024). Self-Play Preference Optimization for Language Model Alignment. arXiv preprint arXiv:2405.00675.\nHu, Z., Wang, L., Lan, Y., Xu, W., Lim, E. P., Bing, L., \u0026hellip; \u0026amp; Lee, R. K. W. (2023). Llm-adapters: An adapter family for parameter-efficient fine-tuning of large language models. arXiv preprint arXiv:2304.01933\nZaken, E. B., Ravfogel, S., \u0026amp; Goldberg, Y. (2021). Bitfit: Simple parameter-efficient fine-tuning for transformer-based masked language-models. arXiv preprint arXiv:2106.10199.\nLiu, Z., Oguz, B., Zhao, C., Chang, E., Stock, P., Mehdad, Y., \u0026hellip; \u0026amp; Chandra, V. (2023). Llm-qat: Data-free quantization aware training for large language models. arXiv preprint arXiv:2305.17888.\nLoRA is sometimes treated as a special case of an adapter module. In this post, I separated them as two different approaches given the popularity of LoRA.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://jiajiexiao.github.io/posts/2024-05-10_biollm_intro/","summary":"The rapid advancements in Natural Language Processing (NLP) have showcased the versatility and efficacy of Large Language Models (LLMs). These models have demonstrated significant capabilities in compressing vast amounts of information through unsupervised or self-supervised training, enabling impressive few-shot and zero-shot learning performance. These attributes make LLMs particularly attractive for domains where generating extensive task-specific datasets is challenging, such as in biomedical applications. Recent attempts to apply LLMs in biomedical","title":"Biomedical LLMs (1): Intro"},{"content":"\u0026ldquo;Large p small n\u0026rdquo; describes a scenario where the number of features ($p$) is much greater than the number of observations ($n$) for model training. While it is not a new problem, it continues to pose significant challenges in real-world applications of machine learning, especially for domains lacking rich data or fast and cheap data generation processes. In this blog post, I\u0026rsquo;ll document my recent thoughts on the \u0026ldquo;large p small n\u0026rdquo; problem.\n1. Toy Problem Setup For simplicity and easy illustration, let\u0026rsquo;s look at a binary classification problem with linearly separable data, where at least one hyperplane can perfectly distinguish between the two classes.\nThe equation of a hyperplane in a $p$-dimensional space is given by:\n\\begin{equation} \\begin{aligned} w_1 x_1 + w_2 x_2 + \u0026hellip; + w_p x_p + b = 0. \\end{aligned} \\end{equation}\nHere, $x_1$, $x_2$, \u0026hellip;, $x_p$ are the coordinates of a point (called features) in the $p$-dimensional space, and $w_1$, $w_2$, \u0026hellip;, $w_p$, and $b$ are special numbers (called weights and bias) that determine the exact position and the norm direction of the hyperplane. Now, if we have a new point ($x\u0026rsquo;$) and want to know which group it belongs to, we can do two things:\nGeometrically: We can look at where the point is located in relation to the line. If it\u0026rsquo;s on one side of the line, it belongs to one group; if it\u0026rsquo;s on the other side, it belongs to the other group.\nAlgebraically: We can plug the coordinates of the point into the left side of the eq 1 and calculate the result. If the result is positive, the point belongs to one group; otherwise, it belongs to the other group.\nThese weights and bias constitute $p+1$ unknown parameters that govern predictions. Our goal is to find the \u0026ldquo;true\u0026rdquo; values of these parameters that define the class assignments in the underlying data generation process, so that we can reliably predict the class of any future unseen point in the $p$-dimensional space. To achieve this, we typically convert this into an optimization problem and use maximum likelihood estimation based on the observed samples. This involves finding the optimal values of the parameters that minimize a loss function such as binary cross-entropy $\\mathcal{L_b}$ or hinge loss $\\mathcal{L_h}$:\n\\begin{equation} \\begin{aligned} \\mathcal{L_b} (y, \\hat{y}) = -\\frac{1}{N} \\sum_{i=1}^{N} [y_i \\cdot \\log(\\hat{y}_i) + (1 - y_i) \\cdot \\log(1 - \\hat{y}_i)], \\end{aligned} \\end{equation}\n\\begin{equation} \\begin{aligned} \\mathcal{L_h}(y, \\hat{y}) = \\frac{1}{N} \\sum_{i=1}^{N} \\max(0, 1 - y_i \\cdot \\hat{y}_i), \\end{aligned} \\end{equation}\nwhere $y_i$ is the true label of the $i^{th}$ observation, and $\\hat{y}_i$ is the predicted label or the generalized form of predicted probability for positive class assignment of the $i^{th}$ observation derived by applying an activation function $\\sigma$, such as the sigmoid (which is a smoothed step function), to the weighted sum:\n\\begin{equation} \\begin{aligned} \\hat{y_i} = \\sigma(w_1 x_{i1} + w_2 x_{i2} +\u0026hellip; + w_p x_{ip} + b). \\end{aligned} \\end{equation}\nWhen finding a minimum value of a function, in math and physics, we often to check for points where the gradient is zero and the Hessian matrix is positive definite 1. That means we may want to first solve $\\nabla_{w, b} \\mathcal{L} = 0$ to find the critical points in the parameter space. However, there appear to have no closed form solution due to the involved nonlinearity in deriving $\\hat{y}_i$ in this case (Lipovetsky2015 or see discussions in link1 and link2). Consequently, gradient descent-based algorithms are often employed to find values for $w$ and $b$ that minimize the loss function $\\mathcal{L}$.\n2. Not All Solutions Are Equally Generalizable While binary cross-entropy and hinge loss are both convex concerning $\\hat{y}$ 2, this convexity is not strict 3 due to the possible zero values of second-order derivatives of the losses with respect to $\\hat{y}$. So, there exist infinitely many sets of weight and bias values capable of separating data points. Moreover, as the feature dimension increases, the volume of the feature space grows exponentially, reducing the likelihood of obtaining an unbiased or well-representative sample for model training exponentially 4. As a result, the infinitely many separating hyperplanes are not equally generalizable to unseen data that are far from the sampled space.\nAs seen, in large $p$ small $n$ scenarios, even with a simple linear model exhibiting perfect performance on the training set, obtaining parameters conducive to predicting labels accurately on unseen test data can be challenging. When it involves non-linear components, the convex optimization can turn into a non-convex one. This will be more difficult because the number of local minima can increase along with input dimension $p$. Any corresponding performance degrades in the unseen test set can be a result of overfitting on the limited training set.\n3. Tackling the Problem of Large P Small N To address this problem, we may often need to leverage additional information to guide feature engineering, model design, model training, and so on.\n3.1 Feature selection Feature selection is probably the simplest thing we may consider to address the large $p$ small $n$ problem as it aims to cut the number of features so $p$ and $n$ are more comparable.\nIn order to know which features to keep for building models, we typically leverage some assumptions or intuition to decide which features are more useful for the problems we try to predict. For example, we may assume that the features that have a high association with the target variable are more predictive than the ones that have a low association with the target variable. We may also (iteratively) try different feature sets for modeling and see which combination of features could lead to the most favorable performance in the validation sets.\nWhile feature selection is simple and intuitive, the dropped features may actually be critical. In long-tailed problems, the dropped features may be the ones that are more likely to have a high variance in the training set. In this case, the model trained with a limited training set and reduced feature set may not be able to generalize well to the unseen test set.\n3.2 Regularization Regularization is another common approach to improve the robustness and generalization in the large $p$ small $n$ problem. The most common way to regularize the model training process is to add a penalty term to the loss function to penalize the model complexity, avoiding overfitting.\n3.2.1 $L_p$ regularization To penalize having non-zero values of the model parameters, $l_p$ regularization adds $L_P$ norm of the model\u0026rsquo;s parameters 5 raised to the power of $p$ to the loss function as below:\n\\begin{equation} \\begin{aligned} \\mathcal{L_{\\text{total}}} = \\mathcal{L_{\\text{original}}} + \\lambda_p \\mathcal{L_{p}}, \\end{aligned} \\end{equation}\n\\begin{equation} \\begin{aligned} \\mathcal{L_p} = ||w||^p_p = \\sum_{j=1}^{p} |w_j|^p, \\end{aligned} \\end{equation}\nwhere $\\lambda_p$ is a hyperparameter for regularization strength and $p$ is the order of the norm with typically non-negative value 6.\nDifferent values of $p$ may have different effects on the model training process (Goodfellow, et al 2016). For example, adding $L_2$ regularization can shrink the weights toward 0 and is equivalent to multiply your likelihood a gaussian prior in the maximum a posteriori (MAP) estimation from the view point of Bayesian. $L_1$ regularization is equivalent to applying a Laplacian prior in the MAP estimation and leads to sparser solutions than $L_2$ 7. A more extreme regularization is $L_0$ that adds the sum of number of non-zero weights to the loss to force the model have more zero weights for certain features than $L_1$ does 8.\nWhile $L_0$ and $L_1$ regularization may sometimes be used as a gradient-based feature selection method, they may introduce difficulties in optimization as the $L_0$ norm is not convex and the $L_1$ norm is not differentiable at the origin. Therefore, $L_2$ regularization might be more commonly used in practice.\nMoreover, since the Hessian for $\\mathcal{L_2}$ is positive definite 9, this makes the loss function landscape strictly convex as long as the original loss function $L_{original}$ in the parameter space is convex. This property of $L_2$ regularization ensures a single global optimal solution for simple but widely adopted linear models like logistic regression. In our previous toy problem, when applying $L_2$ regularization, there will be a unique hyperplane being found by the optimization process.\n3.2.2 Other regularization techniques In addition to $L_p$ regularization, there are other forms of regularization that allow us to incorporate domain knowledge into the model training process. For example, when there is a spurious correlation in the training data, the naively trained model may establish some unwanted behaviors such as a correlation between the model outputs and bias attributes that are spuriously correlated to the target variables (and features). Such a correlation indicates that the model leverages the spurious correlation to make predictions, leading to poor generalization in the test data that lacks such spurious correlation. To avoid this, we can add a penalty term $\\mathcal{L_{\\text{corr}}}$ to the loss function to penalize the model not to have such spurious correlation.\n\\begin{equation} \\begin{aligned} \\mathcal{L_{\\text{corr}}} = \\frac{1}{M} \\sum_{i=1}^{M} |(\\hat{y}_i -\\overline{\\hat{y}}) \\cdot (a_i- \\overline{a})|, \\end{aligned} \\end{equation}\nwhere $|(\\hat{y}_i -\\overline{\\hat{y}}) \\cdot (a_i- \\overline{a})|$ quantifies the magnitude of the correlation between model output $\\hat{y}_i$ and bias attribute $a_i$ for the $i$th sample among select $M$ samples in the training data. Except for this simple example, we may also come up with more complex regularization like what is done in generative adversarial network (GAN)(Goodfellow, et al 2014) and contrastive learning (Oord, et al 2018).\nWe may also apply controls on the model training dynamics to regularize the model. For example, we can stop the model training early when the validation loss is not improving even though the learning curve so far shows that the training loss is continuously decreasing. This is called early stopping, which prevents the model from overfitting the training data. We can also apply dropout, which randomly turns off some of the neurons during training to force the model to learn more robust features (Srivastava2014). This regularization also provides some data augmentation, which adds some synthetic training data to increase $n$. We may also introduce additional relevant tasks to regularize the model. In particular, we may use different portions of the model for different tasks. The shared components will likely better capture the key components in the data, and the resultant model thus more robust.\n3.3 Feature engineering Feature engineering is another way to incorporate domain knowledge into the model training process. This involves using expert knowledge to transform the raw features into a lower-dimensional space of more relevant features. Dimensionality reduction techniques can also be used for this purpose. While feature engineering is widely used in conventional machine learning, its effectiveness depends on the reliability and completeness of the expert knowledge.\n3.4 Architectural Biases A sister method of feature engineering is to design the model with appropriate architectural biases. The structure of the model itself can also impose potentially useful biases. For example, Convolutional neural netowrks (CNN) can learn how to extract local features in an image with hundreds to hundreds of thousands of pixels using weight-sharing convolution filters. These filters are applied along input features and provide translation-equivariant feature maps 10, which are much more efficient and effective than using mlp or feature engineering approaches. The translation-equivariance property allows the model to learn to recognize the same object in different locations in the image. Without such a bias, the model may require a lot of more training data to learn.\nHowever, the architectural bias can also be the bottleneck that limits the model generalization capability. For example, the CNN model may be biased towards leveraging the local patterns but fail to correctly recognize the distant global structure like a vision transformer can do (Dosovitskiy2020). Moreover, due to a lack of rotation-equivariance, the CNN model may fail to recognize rotated objects. In this case, we may need to have data augmentation via rotation or design a model that is rotation-equivariant.\n3.5 Pre-training and Foundation Models In recent years, foundation models pre-trained on large-scale datasets have become increasingly popular for tackling the large $p$ small $n$ problem. These models are trained on broad datasets using self-supervised learning objectives, which allows them to learn general-purpose feature representations that can be fine-tuned for specific tasks with limited data. For example, a model pre-trained on ImageNet can be fine-tuned on a small dataset of medical images to achieve good performance on disease classification. Foundation models in natural language processing, such as BERT (Devlin2018) and GPT (Brown2020), have also shown impressive performance on a wide range of tasks with limited fine-tuning data. These models are trained on massive text corpora and learn to capture complex linguistic patterns and world knowledge. By leveraging the knowledge learned during pre-training, foundation models can achieve good performance on downstream tasks with few or no labeled examples (i.e., few-shot or zero-shot).\nAs seen, with these pre-trained models, the models don\u0026rsquo;t just provide reasonable architectural biases but also better weight initialization, which helps effectively integrate large $p$ features than the model trained from scratch from the limited small $n$ training data. It also can significantly reduce the training time and generalization error.\nSummary All these methods, including feature selection, feature engineering, regularization, model design, and pre-training, are based on our prior understanding of the data generation process and the model training. They are sometimes called inductive biases, which refer to the assumptions, preferences, or prior knowledge that a learning algorithm incorporates to generalize beyond the training data and make predictions on unseen data. These biases guide the learning process and help the model to prioritize certain solutions or hypotheses over others. Whether the inductive biases being leveraged are sound or not determines whether we could generalize the model to unseen data.\nFor the large $p$ small $n$ problem, it is often believed that the most relevant information for modeling the problem lies in a low-dimensional manifold (Oord, et al 2018). Some methods use fewer parameters to learn this latent space but rely on stronger inductive biases, while others use more parameters with weaker inductive biases. In large $p$ small $n$ cases, models with more parameters are typically more prone to overfitting, requiring more data to estimate the optimal parameters.\nSince the ImageNet moment, the combination of big data and deep learning with suitable inductive biases has led to numerous successes in various applications. For domains with limited data, successful examples like AlphaFold2 highlight the importance of inductive biases (Jumper2021). Developing appropriate inductive biases for large $p$ small $n$ problems remains an active area of research.\nAlthough collecting more features or modalities of data may offer unique advantages, it is crucial to recognize that expanding the feature set can be costly and increase the risk of data biases and overfitting. Furthermore, acquiring additional samples for training and evaluation can be a challenging task sometimes. This issue is prevalent across various predictive modeling domains, including healthcare, business, and science. Consequently, investing resources to augment feature sets necessitates careful strategic planning and consideration to ensure that the benefits outweigh the potential drawbacks. Yep, what a large $p$ for small $n$ ;)\nIn summary, the large $p$ small $n$ problem presents unique challenges that require a balance between model complexity, inductive biases, and data availability. Addressing these challenges is crucial for developing effective predictive models in data-limited domains.\nCitation If you find this post helpful and are interested in referencing it in your write-up, you can cite it as\nXiao, Jiajie. (April 2024). What a large p for small n. JX\u0026rsquo;s log. Available at: https://jiajiexiao.github.io/posts/2024-04-29_large_p_small_n/.\nor add the following to your BibTeX file.\n@article{xiao2023howtoachieverobustai, title = \u0026#34;What a large p for small n\u0026#34;, author = \u0026#34;Xiao, Jiajie\u0026#34;, journal = \u0026#34;JX\u0026#39;s log\u0026#34;, year = \u0026#34;2024\u0026#34;, month = \u0026#34;April\u0026#34;, url = \u0026#34;https://jiajiexiao.github.io/posts/2024-04-29_large_p_small_n/\u0026#34; } References Lipovetsky, S. (2015). Analytical closed-form solution for binary logit regression by categorical predictors. Journal of applied statistics, 42(1), 37-49. https://stackoverflow.com/questions/37997253/can-we-use-normal-equation-for-logistic-regression https://sebastianraschka.com/faq/docs/logistic-analytical.html#is-there-an-analytical-solution-to-logistic-regression-similar-t Goodfellow, I., Bengio, Y., \u0026amp; Courville, A. (2016). Deep learning. MIT press. Chapter 7. Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., \u0026hellip; \u0026amp; Bengio, Y. (2014). Generative adversarial nets. Advances in neural information processing systems, 27. Oord, A. V. D., Li, Y., \u0026amp; Vinyals, O. (2018). Representation learning with contrastive predictive coding. arXiv preprint arXiv:1807.03748. Theodoridis, S., \u0026amp; Koutroumbas, K. (2006). Pattern recognition. Elsevier. Chapter 5, Section 5.9. Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., \u0026amp; Salakhutdinov, R. (2014). Dropout: a simple way to prevent neural networks from overfitting. The journal of machine learning research, 15(1), 1929-1958. Dosovitskiy, A., Beyer, L., Kolesnikov, A., Weissenborn, D., Zhai, X., Unterthiner, T., \u0026hellip; \u0026amp; Houlsby, N. (2020). An image is worth 16x16 words: Transformers for image recognition at scale. arXiv preprint arXiv:2010.11929. Devlin, J., Chang, M. W., Lee, K., \u0026amp; Toutanova, K. (2018). Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805. Brown, T., Mann, B., Ryder, N., Subbiah, M., Kaplan, J. D., Dhariwal, P., \u0026hellip; \u0026amp; Amodei, D. (2020). Language models are few-shot learners. Advances in neural information processing systems, 33, 1877-1901. Jumper, J., Evans, R., Pritzel, A., Green, T., Figurnov, M., Ronneberger, O., \u0026hellip; \u0026amp; Hassabis, D. (2021). Highly accurate protein structure prediction with AlphaFold. Nature, 596(7873), 583-589. To check if the Hessian matrix is positive definite, we can examine whether all eigenvalues of the matrix are positive. In the 1D case, we can also simply use the second derivative test to check if the function is convex. If the second derivative is positive, the function is convex. If the second derivative is negative, the function is concave. If the second derivative is zero, the function is a flat line. It\u0026rsquo;s worth to note that, at a critical point, the function derivative can be undefined (such as $x=0$ for $f(x) = |x|$).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe convexity of the loss function in the parameter space depends on the choice of activation function. If the activation function is convex, the loss will be convex in the parameter space, as the weighted sum is a linear (and thus convex) operation. On the other hand, like a typical neural network with at least two linear layers and some form of nonlinear activation function after each layer, the loss function landscape in the parameter space is not convex given the Hessian matrix $H$ is not positive semidefinite (meaning the eigenvalues of $H$ are non-negative). The composition of the loss function with the non-linear activation functions and the complex architecture of neural networks introduces non-convexity. Training a neural network thereby involves navigating a non-convex optimization landscape, which can have multiple local optima and saddle points (meaning the Hessian is indefinite, i.e., its eigenvalues have both positive and negative values).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nStrictly convex guarantees that there is only one minimum. Different types of convexity are roughly told via the following:\n$f$ is convex if and only if $f\u0026rsquo;\u0026rsquo;(x) \\geq 0$ for all $x$ $f$ is strictly convex if and only if $f\u0026rsquo;\u0026rsquo;(x) \u0026gt; 0$ for all $x$ (This is sufficient but not necessary for strictly convexity. When the function is not not differentiable, the gradient is replaced by the sub-gradient at the non-smooth point $x$.) $f$ is strongly convex if and only if $f\u0026rsquo;\u0026rsquo;(x) \\geq m \u0026gt; 0$ for all $x$ (Strong convexity can provide faster convergence and tighter error bounds to the minimum compare to strictly convex function) \u0026#160;\u0026#x21a9;\u0026#xfe0e; This is an example of curse of dimensionality in sampling. For machine learning, a typical rule of thumb is that there should be at least 5 training examples for each dimension or 10 times the VC dimension in the representation space (Theodoridis2006). If one wants to apply this rule, the number of training examples required to learn a model in the training set grows exponentially with the number of dimensions.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe calculation of $L_p$ regularization usually ignores the bias terms and moving averaged values in batch normalization since they don\u0026rsquo;t contribute to overfitting. However, for convenience, in many implementations, such as the widely adopted library PyTorch, all parameters that require updating by backpropagated gradients may be counted by the optimizer\u0026rsquo;s default weight decay calculation. Weight decay is a form of regularization that is sometimes (e.g., SGD without momentum or AdamW that has decoupled weight decay calculation) equivalent to $L_2$ regularization.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nFor $p=0$, $L_0$ norm basically counts non-zero elements and $0^0\\equiv0$.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLaplacian prior has higher probability density near zero compared to a Gaussian prior, thus promoting sparsity.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n$L_0$ regularization directly penalizes the number of non-zero weights, while $L_1$ regularization indirectly promotes sparsity by shrinking weights more aggressively than $L_2$.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe Hessian for $\\mathcal{L_2}$ is a diagonal matrix with 2 as the diagonal elements. So the eigenvalues of the Hessian are equal to 2, which are always positive. Q.E.D.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTranslational equivariance means that the model can recognize the same object in different locations in the image. In math, a function or transformation is equivariant if it maintains a certain relationship between its input and output when both are transformed. In other words, if $f$ is equivariant with respect to transformations $T$ and $S$, then $f(T(x))=S(f(x))$ for all $x$. A stronger version of equivariance is invariance. A function or transformation is invariant if its output remains unchanged when its input is transformed in a certain way. For example, if a function $f(x)$ is invariant under translation, it means that $f(x+a)=f(x)$ for any value of $a$. For CNN, convolutional filters are translation-equivariant while max-pooling is translation-invariant.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://jiajiexiao.github.io/posts/2024-04-29_large_p_small_n/","summary":"\u0026ldquo;Large p small n\u0026rdquo; describes a scenario where the number of features ($p$) is much greater than the number of observations ($n$) for model training. While it is not a new problem, it continues to pose significant challenges in real-world applications of machine learning, especially for domains lacking rich data or fast and cheap data generation processes. In this blog post, I\u0026rsquo;ll document my recent thoughts on the \u0026ldquo;large p small n\u0026rdquo; problem.","title":"What a large p for small n"},{"content":"In my previous post, I highlighted the growing influence and adoption of Artificial Intelligence (AI) and machine learning (ML) systems, discussing how they attain \u0026ldquo;intelligence\u0026rdquo; through a careful \u0026ldquo;data diet.\u0026rdquo; However, a fundamental challenge arises from out-of-distribution (OOD), posing barriers to robust performance and reliable deployment. In particular, covariate shift (eq 1) and concept drift (eq 2) are two major types of OOD frequently encountered in practice, demanding mitigation for robust model deployment.\n\\begin{equation} \\begin{aligned} \\text{Covariate shift:} \\quad P_\\text{S} (X) \\neq P_\\text{T} (X) \\end{aligned} \\end{equation}\n\\begin{equation} \\begin{aligned} \\quad \\text{Concept drift:} \\quad P_\\text{S} (Y | X) \\neq P_\\text{T} (Y | X) \\end{aligned} \\end{equation}\nIn this post, we delve into strategies to tackle OOD and enhance the robustness of AI/ML models.\n1. Baseline: Quality Control and Normalization In various discussions today, people often talk about data quality, batch/cohort effects, or \u0026ldquo;garbage in, garbage out\u0026rdquo;. These are actually quite relevant to robustness of your model. As a result, the first thing we should consider prioritizing is to establish quality control in your data generation/collection pipeline and to conduct data normalization. For scenarios prone to data biases (e.g., batch effects in biological experiments), designing control measurements becomes crucial for later data normalization. Quality control and normalization ensure that the data\u0026rsquo;s quality is suitable for model training and inference, and that the inputs are on comparable scales.\nFig 1. Quality control and normalization workflow adopt in digital pathology. Prostate (a) and lung (b) tissue images stained with hematoxylin and eosin were normalized against target images and evaluated by pathologists. Source image is from Fig2 in Michielli, et al (2022).\nFig. 1 illustrates a clinical workflow in digital pathology. Despite variance in stain levels and random artifacts, stain normalization significantly improves image quality and enhances clinical diagnostic confidence (Michielli, et al (2022)). When developing and deploying computer vision (CV)-based AI/ML systems for assisting pathologists, stain normalization and quality controls help mitigate covariate shifts in the stain images. In other words, after these data preprocessing steps, the marginal distribution of images in source and target domains becomes comparable. Consequently, OOD problems transform into IID ones.\n$$ \\text{Biases} \\xrightarrow{\\text{e.g. batch effects}} P_\\text{S} (X) \\neq P_\\text{T} (X) \\xrightarrow[\\text{QC}]{\\text{normalization}} P_\\text{S} (X\u0026rsquo;) = P_\\text{T} (X\u0026rsquo;) $$\n2. Domain Adaptation when Target Domain is Accessible 2.1 Instance-Reweighting Despite our efforts in quality control and normalization, covariate shifts may persist. Such situations often indicate selection bias, where samples from the source domain may not cover all possible feature distributions, failing to fully reflect the target domain. While acquiring less biased or more representative data seems intuitive, it can be prohibitively costly in terms of both money and time, often requiring cross-functional efforts over months to years. Consequently, computational tactics or mitigations become essential and may prompt inquiries from managers or even CxOs.\nTo address this, let\u0026rsquo;s begin by checking for any known information about the target domain. The observation of covariate shifts implies some knowledge about the target domain, such as the statistical distributions of features. This information becomes valuable for guiding the use of source domain data to build a model that performs well in the target domain. Such a goal is also known as domain adaptation, because the aim is to adapt the model trained on the source domain to generalize effectively in the target domain with different distributions.\nFig 2. Instance-reweighting adapts the classifier trained in source domain to generalize to target domain. Source images are from Jong (2017).\nInstance-reweighting is a domain adaptation method leveraging the target domain distribution. To illustrate, I just use the great examples from Johann de Jong\u0026rsquo;s blog. Fig. 2 displays the distributions of features x1, x2, labels of each data point, and learned and ground truth decision boundaries. Due to selection biases, the source domain exhibits different marginal distributions compared to the target domain (Fig. 2a). Training a classifier solely on source domain data yields a decision boundary diverging from the ground truth for the target domain (Fig. 2b). Instance-reweighting involves adjusting each training instance\u0026rsquo;s weight in the source domain to match the target domain distribution (Fig. 2c). This reweighted training significantly improves the learned decision boundary\u0026rsquo;s performance in the target domain. Instance-reweighting is widely adopted when instance-specific considerations are needed for model training and evaluation. For example, addressing problems with long-tailed distributions involves static reweighting (constant sample weights) or dynamic reweighting (e.g., via focal loss 1) to penalize minority groups more, resulting in more robust performance against rare events.\nIn summary, instance-reweighting aims to mitigate encountered covariate shifts by adjusting the sample distribution. With the reweighting scheme matching the target domain, the reweighted source domain distribution $P_\\text{S}\u0026rsquo; (X)$ aligns with the target domain distribution $P_\\text{T} (X)$.\n$$ \\text{Biases} \\xrightarrow{\\text{e.g. selection biases}} P_\\text{S} (X) \\neq P_\\text{T} (X) \\xrightarrow{\\text{reweighting}} P_\\text{S}\u0026rsquo; (X) = P_\\text{T} (X) $$\nThe additional knowledge used to derive the weights introduces some inductive bias for the model; thus, the accuracy of this additional knowledge about the target domain can be critical to the model\u0026rsquo;s robustness.\n2.2 Semi-Supervised Learning In addition to target domain statistics, if we have access to unlabeled data from the target domain, we can explore other domain adaptation methods leveraging the intrinsic structure behind the data to improve OOD performance. For instance, employing a semi-supervised learning algorithm allows incorporating unlabeled data from the target domain during model training. The initial model is trained based on the source domain data. Subsequently, this model is applied to the unlabeled target domain data to generate pseudo-labels for those unlabeled samples. Samples with confident pseudo-labels are selected as additional training data, and the model is retrained alongside the source domain samples. This iterative process refines the model, enhancing its performance in the target domain.\nFig 3. Semi-supervised learning aids domain aptation. (a) Massive unlabeled data representing the target domain is useful to overcome selection biases in the source domain and assist the model in generalizing to the target domain. (b) Pseudo-labeling algorithm iteratively augments the source domain data and regularizes the model training.\n2.3 Test-Time Training Additionally, Test-Time Training (TTT) (Sun, et al (2020)) can be explored even when there is no access to the target domain until running model testing. This technique introduces additional self-supervision tasks that can be applied to unlabeled data from the target domain. In an image classification task example as shown in Fig. 4, the model first projects the images into a latent space via an encoder. Then, the latent representation will be used for predicting the rotation angle of the images in addition to predicting the object label of the images. Self-supervised targets can be easily obtained since you know the angle at which the image is rotated in the data-augmentation process. During testing, we now have access to the target domain data as it is input for the model for making predictions. Each test image can be augmented via rotation and passed to the model for self-supervised learning. This self-supervised learning offers a chance to update the encoder based on the target domain, which learns how to project the target domain images into a comparable latent space relative to the source domain. This is the test-time training.\nFig 4. Test-Time Training. Source image is from the authors\u0026rsquo; page (link) of TTT (Sun, et al (2020)).\nBoth semi-supervised learning and test-time training alleviate covariate shifts by seeking data augmentation to get equivalent IID.\n$$ \\text{Biases} \\xrightarrow[\\text{batch effects}]{\\text{e.g. selection biases}} P_\\text{S} (X) \\neq P_\\text{T} (X) \\xrightarrow[\\text{self-supervised regularization}]{\\text{data augmentation}} P_\\text{S} (X\u0026rsquo;) = P_\\text{T} (X) $$\nWhile these are effective methods and tactics in many real-world applications, there may be other factors limiting their adoption. For example, in scenarios with strong regulations, such as when the deployed model needs to be fully locked and requires FDA approval, using the target domain data (e.g., clinical trial data and samples collected post-approval) to update the model may not be allowed or under regulation. For applications that require low latency in inference time, TTT may be too slow to be deployed. All these mitigations require domain-specific consideration before being pursued.\n2.4 Transfer Learning and Fine-Tuning When we have access to the target domain\u0026rsquo;s labeled data during model development stage, although it has a very limited sample size compared to the source domain, we can conduct transfer learning and fine-tuning to adapt the model to the new domain.\nTransfer learning aims to apply knowledge learned from one domain or one task to another related domain or task, where the knowledge is often encoded as learnable parameters in deep neural networks nowadays. The rationale behind transfer learning is that there is transferable knowledge across related domains and tasks. Thus, it is beneficial to start from the pre-trained network based on the source domain with lots of data, rather than training the network from scratch based on the target domain with a limited amount of data. Transfer learning typically freezes the parameters pre-trained based on the source domain but, on top of that, adds a few additional layers whose parameters are fitted based on the target domain.\nSimilarly, fine-tuning also starts from the same pre-trained network along with possible optional layers. However, in contrast to transfer learning 2, fine-tuning also updates the weights of the pre-trained network or a subset of its layers based on the target domain.\nFig 5. Domain adpation learns domain-invariant transformations and aligns domain distributions. Source image is from Fig. 1 in Choudhary2020, et al (2020), where domain adaptation is treated as a transductive transfer learning method. Here, this image illustrates the idea that covariate shift disappears once the different domains are aligned.\nEssentially, both transfer learning and fine-tuning adapt the parameters learned from the source domain and seek further minimum adjustments to make the source and target domains comparable in the projection space (i.e., latent space) of the features. Like other domain adaptation approaches we\u0026rsquo;ve seen previously, this mitigates the covariate shift and allows the model to generalize to the target domain (Fig. 5).\n$$ \\text{Related tasks or domains} \\xrightarrow{} P_\\text{S} (X) \\neq P_\\text{T} (X) \\xrightarrow[\\text{fine-tuning}]{\\text{transfer learning}} P_\\text{S} (X\u0026rsquo;) = P_\\text{T} (X\u0026rsquo;) $$\n3. Domain Generalization when Target Domain is Inaccessible So far, we have examined relatively simple OOD cases. However, more challenging scenarios can arise. In some instances, there might be no reliable prior information or even access to the target domain when training and locking the model for deployment. This challenge is often encountered in areas with limited training data and stringent regulations, where capturing a representative set becomes particularly difficult.\nMachine learning literature uses the term domain generalization to characterize the goal of building robust models for target domains that are entirely inaccessible during model development. This presents a more challenging but potentially more needed extension of domain adaptation.\nApart from covariate shift, another OOD challenge we haven\u0026rsquo;t addressed is concept drift. It can seem daunting when the relationships between features and labels differ in the target and source domains, and this shift is unknown until after building, selecting, and deploying the models. Well, performance degrade in shifted target domain may not be a big issue in low-stakes scenarios, just further train the model or retrain. However, it\u0026rsquo;s a common challenge in healthcare, where AI/ML-based or AI/ML-derived products must meet primary and secondary goals in clinical trials for disease diagnosis and treatment.\nSo, what can we do in these more difficult cases? Consider a scenario where high school students are only allowed to take the real SAT test once. They should be allowed to take as many mocks as they want, right? Would that be helpful? I guess the more closely the mocks can reflect the real test, the higher the chance to achieve similar performance in the actual exam 3. Similarly, in domain generalization, we still need to think about how we can make the source domain data more like the target domain.\nIn the realm of concept drift, the relationships between Y and X are subject to change. In reality, there can also be situations where both P(Y|X) and P(X) change across domains. The key question is whether there are features or projections of features that establish a stable relationship with target labels, regardless of the domains.\n3.1 Correlation vs Causality In our quest for a more stable relationship between features and targets, let\u0026rsquo;s revisit how AI/ML models are trained.\nModels utilize differences between model outputs and targets to update parameters. This leads to that fact that the model leverages the correlation between the features and targets to learn. A feature more correlated with the targets makes the model more likely to use it for predictions.\nFig 6. Correlation and causality. X and Y are two random variables that appear to be correlated. When digging into possible data generation process, it can be simplified as either they have a causal relationship or they have a common cause Z.\nHowever, correlation is not a stable causal relationship; it can be spurious for various reasons such as sample collection biases. According to Reichenbach\u0026rsquo;s common cause principle (Hitchcock2021), if we observe a correlation or association between two random variables, it means either one of the variables causes the other or there is a third variable that causes both (known as confounding) (Fig. 6). Causal relationships are more stable than correlation, as spurious correlations can easily change across domains or environments.\nFor instance, consider a predictive model trained on medical data in the source domain, where an attribute like \u0026ldquo;number of hospital visits\u0026rdquo; shows a high correlation with disease outcomes due to selection biases. This attribute might seem crucial in the source domain, but once the selection biases disappear in the target domain, the correlation weakens, and the attribute loses its predictive power for disease outcomes. This scenario resembles a concept drift, highlighting opportunities to address OOD by identifying domain-invariant components in features that have a (ideally) causal relationship with target labels.\n3.2 Multitask Learning and Adversarial Training To identify invariant components in features, classical approaches like feature selection and engineering might come to mind. These handcrafted pre-processing methods rely on additional prior knowledge and are often employed in statistical learning and settings with small training sizes. However, such prior knowledge, acting as an inductive bias, may limit further performance improvements. For more complex problems with reasonable training sizes, we need an end-to-end training framework to learn invariant components in features with a stable relationship to target labels.\nMultitask learning provides such a framework, allowing flexible representation learning. As depicted in the left part of Fig. 7, features can be encoded into a latent representation that predicts multiple attributes related to the main task (original target label) and auxiliary tasks (other attributes of sample instances). This facilitates the model to extract a more meaningful dense representation for predictions. Similar to Test-Time Training, well-designed auxiliary tasks can offer useful regularization on the networks, preventing overfitting on the main task.\nFig 7. Domain-adversarial training a neural network that learns both class and domain label. A neural network can be divided into encoding and decoding parts. The left side illustrates a feature extractor $G_f$ encoding inputs $X$ into latent features $f$. The right side shows latent features $f$ being decoded to predict class label $y$ and domain label $d$. While the loss $L_y$ for the class label is normally backpropagated to update the whole network, the loss $L_d$ for the domain label needs to be reversed when used for adversarial training the feature extractor. Source image is from Fig1 in Ganin, et al (2016).\nIn situations with biased attributes showing high correlation with the target label (confounding), it\u0026rsquo;s crucial for the network not to exploit such shortcuts. Adversarial training becomes relevant in this context, as it can explicitly penalize any direct or indirect use of biased attributes and confounders. The right-hand side of Fig. 7 illustrates the decoding part in multitask learning along with adversarial training. The latent feature is used to predict both class label and domain label. However, since the domain label may introduce confounding effects, one may want the constructed latent space to be less predictive of the domain label. Thus, the prediction loss for the domain label is reversed during backpropagation to the encoding layers. This process is known as adversarial training and can be effective in mitigating known biases in the source domain if being well tuned. See eq3 for exact gradient descent operation for the whole training process in math4.\n\\begin{equation} \\begin{align*} \\theta_{y} \u0026amp;= \\theta_{y} - \\eta \\frac{\\partial L_y}{\\partial \\theta_{y}} \\\\\\ \\theta_{d} \u0026amp;= \\theta_{d} - \\lambda \\frac{\\partial L_d}{\\partial \\theta_{d}} \\\\\\ \\theta_{f} \u0026amp;= \\theta_{f} - \\left( \\eta \\frac{\\partial L_y}{\\partial \\theta_{y}} - \\lambda \\frac{\\partial L_d}{\\partial \\theta_{d}} \\right) \\end{align*} \\end{equation}\nThrough these approaches, the goal is to find a more meaningful and less biased representation across domains, mitigating the concept drift issue.\n$$ \\text{Confounders, biases, etc} \\xrightarrow{} P_\\text{S} (Y|X) \\neq P_\\text{T} (Y|X) \\xrightarrow{} P_\\text{S} (Y|X\u0026rsquo;) = P_\\text{T} (Y|X\u0026rsquo;) $$\nUnlike domain adaptation seen previously, these approaches leverage previously ignored meta information that may reflect variance within the source domain itself. These methods don\u0026rsquo;t require access to the target domain at all, making them suitable for domain generalization. Moreover, they can be advantageous, especially when there\u0026rsquo;s no need for access to bias or sensitive attributes during inference in the target domain. On the flip side, these methods may involve more complex training and learning dynamics due to additional regularization terms.\n3.3 Causality-inspired Representation Disentanglement and Invariant Risk Minimization When performing representation learning, we can further ask if we can segregating a portion that holds more causal relevance to the target labels, and another portion that is closely associated with confounders or bias attributes. As discussed in the previous post of this series, a vision model trained on a source domain with images of cows on grassland may exhibit misclassification when confronted with a cow on ice (Causality2024). It\u0026rsquo;s obvious that the pixels of a cow should be a causal component for correct recognition of a cow while the pixels of background is related to the dataset biases (Fig. 8a).\nFig 8. Illustration for Representation Disentanglement. (a) An image of a cow standing on a grassland can be decomposed into a cow and the background of the class land. For image recognition of a cow, the pixels of the cow are the causal factor with an invariant relationship with the concept label of a cow, while the background is with spurious correlation with the label of a cow. (b) Illustration for how causality-inspired representation disentanglement may look like. Raw inputs $X^e$ are encoded into $X_{\\text{inv}}$ and $X_{\\text{spu}}$, which are invariant across domains/environments (denoted as $e$) and spuriously correlated to environments, respectively. $X_{\\text{inv}}$ and $X_{\\text{spu}}$ should be independent from each other conditionally on the original class label $Y$ and environment $e$. Later, $X_{\\text{inv}}$ and $X_{\\text{spu}}$ are decoded to $y_c$ and $y_e$ for predicting the original class of interest and domain/environment label, respectively. This results in three loss terms, covering prediction errors for $Y$ and $e$ and conditional independence requirements. Source image is from a talk given by Koyejo in 2023ICML.\nTo address this, we can design the neural network to encourage disentanglement of the latent representation based on a causality-inspired decomposition (Fig. 8b). This approach is similar to the multitask learning framework discussed in last section, with the distinction that the latent space is now divided into two components. A key enhancement involves introducing a regularization term to promote the conditionally independent disentanglement of these components. This additional regularization ensures the separation of domain-invariant and domain-specific components during training. With the domain-invariant (hopefully causal) component from the latent representation space, we can now find a more stable $P(Y|X)$ across domains, mitigating the concept drift challenge.\n$$ \\text{Confounders, biases, etc} \\xrightarrow{} P_\\text{S} (Y|X) \\neq P_\\text{T} (Y|X) \\xrightarrow{} P_\\text{S} (Y|X_{\\text{inv}}) = P_\\text{T} (Y|X_{\\text{inv}}) $$\nMoving beyond disentanglement, the pursuit of fostering the invariance of learned representations across diverse domains or environments is encapsulated in Invariant Risk Minimization (IRM) (Arjovsky, et al (2019)). In contrast to the conventional training approach solely focused on minimizing empirical risk, known as Empirical Risk Minimization (ERM), as illustrated in more details in previous post, IRM takes a step further. By minimizing the risk across different environments, IRM renders the model less sensitive to variations that are irrelevant to the causal factors. The result is a representation that not only disentangles causal and spurious components but also ensures the invariance of causal components across diverse domains, thereby fortifying the model\u0026rsquo;s generalization capabilities. While IRM may only present significant improvement over EMR in scenarios involving anti-causal data-generation process (Wang \u0026amp; Veitch (2023)), IMR itself is so intriguing and worth a separate blog post or series in the future.\n3.4 Multimodal Integration and Alignment We\u0026rsquo;ve covered various tactics to enhance OOD robustness in AI/ML models. Let\u0026rsquo;s delve into one more tactic: Multimodal Integration and Alignment. This approach might not be commonly mentioned when talking about OOD robustness, but it\u0026rsquo;s an emerging strategy that proves effective. Before exploring the details of how Multimodal Integration and Alignment contribute to robustness improvement, let\u0026rsquo;s examine an example as shown below.\nFig 9. A cow playing saxophone on ice. Images were generated DALL·E 3.\nFig. 9 was generated by DALL·E 3 after receiving a text prompt of \u0026ldquo;a cow playing saxophone on ice\u0026rdquo; (link). Remarkably, the model behind DALL·E 3 seems to accurately understand various concepts, such as the cow, saxophone, and ice. This is particularly impressive given the fact that various biases present in real-world data and what such a prompt describes doesn\u0026rsquo;t exist in reality. The ML model involved in this example integrates two modalities: vision and text (Betker, et al (2023)). These modalities are integrated and aligned to match each concept before generating images based on the prompt. While the image generation part is beyond the scope of this post, multimodal integration and alignment represent a crucial tactic for enhancing the robustness of AI/ML models.\nFig 10. Contrastive Language-Image Pre-training. Source image from Fig 1 in Radford, et al (2021).\nFig. 10 illustrates Contrastive Language-Image Pre-training (CLIP), the core technique enabling vision-language integration and alignment in DALL·E. To achieve multi-modal pre-training, various images and their corresponding captions pass through an image encoder and text encoder, respectively. These encoders extract and represent the summary of information from an image $i$ and a caption $j$ as latent vectors $I_i$ and $T_j$, respectively. Training involves making the latent vectors for paired image and caption inputs ($I_i$ and $T_i$) as similar as possible, while for non-paired inputs, the vectors should be as different as possible. This process aligns the vision latent space with the text latent space, employing a contrastive learning strategy discussed in \u0026ldquo;How AI/ML Models Learn\u0026rdquo; in the last post (Xiao (2023)). CLIP leverages rich information from each modality input, capturing invariant concepts embedded in the latent space of the two modalities. Consequently, CLIP mitigates the concept drift issue. With such a pre-trained latent space, one can further conduct few-shot learning or zero-shot prediction.\n3.5 Debiasing Training Tricks In the previously discussed tactics, gradient-based learning plays a significant role. Several training techniques exist to mitigate biases in models during training. For instance, if positive and negative samples are known to be sampled from biased attribute groups, a practical approach is to design a batch sampler ensuring that all positive and negative samples within a batch originate from the same bias group. By doing so, backpropagated gradients merely reflect the target attribute of interest rather than those bias attributes.\nHowever, when the bias attribute is unknown, alternative methods come into play. One strategy involves identifying bias groups based on the latent representations of samples during the learning process. By controlling learning dynamics or applying appropriate regularization according to the latent representations, the model can be adjusted to mitigate the adverse effects of spurious correlations between biased and target attributes. Given the length of this post, I recommend interested readers explore specific examples provided in references such as Yang2023, Hong2021 and Nam2020 for further insights into these debiasing techniques.\n4. Concluding Remarks: The Pas de Deux of Data and Models In this post, we explored various strategies to address out-of-distribution (OOD) challenges, encompassing both covariate shift and concept drift, in the pursuit of robust AI/ML models. Our discussion covered domain adaptation and domain generalization methods, considering scenarios with and without prior information about the target domain. At a high level, these strategies revolve around acquiring additional data or devising more suitable model training schemes.\nBefore concluding, it\u0026rsquo;s essential to reflect on the impact of data and model architecture on performance. The top panels in Fig. 11 illustrate different fitting conditions concerning model sizes. Panels A to C depict the classic bias and variance trade-offs, where the goal of statistical learning is to approach an ideal fit (i.e., ground truth) with a reasonable number of parameters. However, with the rise of deep neural networks and improved hardware capabilities, overparameterized models have become more prevalent (Panel D in Fig. 10). These models exhibit high learning capacity to directly fit every data point, showcasing the double-decent phenomenon (Nakkiran, et al. (2021)). This phenomenon challenges the conventional bias and variance tradeoff in statistical learning. However, what\u0026rsquo;s more important here is, this toy example suggests us two modeling options: ideal fit and direct fit when faced with data.\nFig 11. Double decent phenomenon and visualization of interpolation and extrapolation zoons. Source image from Fig. 1 in Hasson, et al (2020).\nMeanwhile, when comparing the generalization in this toy case with the known ideal fit, we implicitly evaluate the accuracy of the model\u0026rsquo;s interpolation 5 and extrapolation 6. Extrapolation is generally more challenging and less accurate than interpolation, and OOD is more likely to occur in the extrapolation zone (Fig. 11G). Thus, achieving reliable extrapolation is crucial for OOD robustness. When dealing with impoverished data, seeking an ideal fit model with potential help from prior knowledge and inductive biases is still an attractive approach, especially considering its potentially better extrapolation ability compared to a direct-fit model. However, for cases with abundant data, the learning capacity of an overparameterized model may be appreciated more. Such a direct-fit on big data results in a larger interpolation zone and a smaller extrapolation zone, contributing to model robustness by relying more on interpolation than extrapolation (Fig. 11F).\nOverall, for simple problems, an ideal fit model trained through appropriate learning strategies can provide reliable extrapolation for OOD. In more complex real-world problems, finding such an ideal fit model may be challenging. However, with rich data fed to overparameterized models, the interpolation zone becomes larger, and the model\u0026rsquo;s inability to extrapolate becomes less of a liability. This example underscores the complementary nature of models and data for generalization and robustness. Appreciating the pas de deux of data and models is crucial when building trustworthy AI/ML systems. Additionally, there are other requirements for trustworthy AI/ML, such as calibration/quality of uncertainty, fairness, explainability and transparency, and privacy, which will be explored in future discussions on the road to making model predictions trustworthy decisions.\nCitation If you find this post helpful and are interested in referencing it in your write-up, you can cite it as\nXiao, Jiajie. (Jan 2024). Toward Robust AI Part (2): How To Achieve Robust AI. JX\u0026rsquo;s log. Available at: https://jiajiexiao.github.io/posts/2024-01-06_how_robust_ai/.\nor add the following to your BibTeX file.\n@article{xiao2023howtoachieverobustai, title = \u0026#34;Toward Robust AI Part (2): How To Achieve Robust AI\u0026#34;, author = \u0026#34;Xiao, Jiajie\u0026#34;, journal = \u0026#34;JX\u0026#39;s log\u0026#34;, year = \u0026#34;2024\u0026#34;, month = \u0026#34;Jan\u0026#34;, url = \u0026#34;https://jiajiexiao.github.io/posts/2024-01-06_how_robust_ai/\u0026#34; } References Michielli, N., Caputo, A., Scotto, M., Mogetta, A., Pennisi, O. A. M., Molinari, F., \u0026hellip; \u0026amp; Salvi, M. (2022). Stain normalization in digital pathology: Clinical multi-center evaluation of image quality. Journal of Pathology Informatics, 13, 100145.\nJong, J. (2017). Transfer learning: domain adaptation by instance-reweighting. Retrieved Jan 06, 2024, from https://johanndejong.wordpress.com/2017/10/15/transfer-learning-domain-adaptation-by-instance-reweighting/.\nLin, T. Y., Goyal, P., Girshick, R., He, K., \u0026amp; Dollár, P. (2017). Focal loss for dense object detection. In Proceedings of the IEEE international conference on computer vision (pp. 2980-2988).\nSun, Y., Wang, X., Liu, Z., Miller, J., Efros, A., \u0026amp; Hardt, M. (2020, November). Test-time training with self-supervision for generalization under distribution shifts. In International conference on machine learning (pp. 9229-9248). PMLR.\nChoudhary, A., Tong, L., Zhu, Y., Mendelson, D., Rubin, D., Litjens, G., \u0026hellip; \u0026amp; Zhu, J. (2020). Advancing medical imaging informatics by deep learning-based domain adaptation. Yearbook of medical informatics, 29(01), 129-138.\nHitchcock, C., \u0026amp; Rédei, M. (2021). Reichenbach’s Common Cause Principle (E. N. Zalta, Ed.). Stanford Encyclopedia of Philosophy; Metaphysics Research Lab, Stanford University. https://plato.stanford.edu/entries/physics-Rpcc/\nGanin, Y., Ustinova, E., Ajakan, H., Germain, P., Larochelle, H., Laviolette, F., \u0026hellip; \u0026amp; Lempitsky, V. (2016). Domain-adversarial training of neural networks. Journal of machine learning research, 17(59), 1-35.\nCausality for Machine Learning. Chapter 3: Causality and Invariance, Retrieved December 17, 2024, from https://ff13.fastforwardlabs.com/#how-irm-works.\nKoyejo, S. (2023). On learning domain general predictors. https://icml.cc/virtual/2023/28441.\nArjovsky, M., Bottou, L., Gulrajani, I., \u0026amp; Lopez-Paz, D. (2019). Invariant risk minimization. arXiv preprint arXiv:1907.02893.\nWang, Z. \u0026amp; Veitch, V.. (2023). The Causal Structure of Domain Invariant Supervised Representation Learning. arXiv preprint arXiv:2208.06987.\nBetker, J., Goh, G., Jing, L., TimBrooks, †., Wang, J., Li, L., LongOuyang, †., JuntangZhuang, †., JoyceLee, †., YufeiGuo, †., WesamManassra, †., PrafullaDhariwal, †., CaseyChu, †., YunxinJiao, †., \u0026amp; Ramesh, A. (2023) Improving Image Generation with Better Captions.\nChen, W., Wang, W., Liu, L., \u0026amp; Lew, M. S. (2021). New ideas and trends in deep multimodal content understanding: A review. Neurocomputing, 426, 195-215.\nRadford, A., Kim, J. W., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., \u0026hellip; \u0026amp; Sutskever, I. (2021, July). Learning transferable visual models from natural language supervision. In International conference on machine learning (pp. 8748-8763). PMLR.\nXiao, Jiajie. (Dec 2023). Toward Robust AI Part (1): Why Robustness Matters. JX’s log. Available at: https://jiajiexiao.github.io/posts/2023-12-17_why_robust_ai/.\nHasson, U., Nastase, S. A., \u0026amp; Goldstein, A. (2020). Direct fit to nature: an evolutionary perspective on biological and artificial neural networks. Neuron, 105(3), 416-434.\nNakkiran, P., Kaplun, G., Bansal, Y., Yang, T., Barak, B., \u0026amp; Sutskever, I. (2021). Deep double descent: Where bigger models and more data hurt. Journal of Statistical Mechanics: Theory and Experiment, 2021(12), 124003.\nYang, Z., Huang, T., Ding, M., Dong, Y., Ying, R., Cen, Y., \u0026hellip; \u0026amp; Tang, J. (2023). BatchSampler: Sampling Mini-Batches for Contrastive Learning in Vision, Language, and Graphs. arXiv preprint arXiv:2306.03355.\nHong, Y., \u0026amp; Yang, E. (2021). Unbiased classification through bias-contrastive and bias-balanced learning. Advances in Neural Information Processing Systems, 34, 26449-26461.\nNam, J., Cha, H., Ahn, S., Lee, J., \u0026amp; Shin, J. (2020). Learning from failure: De-biasing classifier from biased classifier. Advances in Neural Information Processing Systems, 33, 20673-20684.\nFocal loss adds a modulating term to conventional cross-entropy loss, focusing learning on hard misclassified examples. It dynamically scales the cross-entropy loss during the training process to penalize hard misclassified samples more than others (Lin, et al (2017)).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nFine-tuning may be considered as a type of transfer learning method by people sometimes. By this definition, transfer learning may involves updating the weights of the pre-trained model as well. Meanwhile, the optional additional layers added in fine-tuning is also called adapters. Updating the entire pre-trained model can be computationally expensive due to its size, so a popular approach called efficient fine-tuning focuses on updating only the adapters. This trend has blurred the distinction between transfer learning and fine-tuning, and the terms are sometimes used interchangeably. I personally prefer to distinguish them a bit so that it can be clearer to readers how the training was actually done.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nOne may also think about toughening the mock exams more than the actual test. This approach ensures that achieving high performance in the mock exams translates to good or even better performance in the real test. But here, consistent performance in mock exams and real test is emphasized. Thus similarity between mocks and real test are desired.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n$\\eta$ and $\\lambda$ in eq3 are two learning rates that update different modules in the network.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nInterpolation is the process of estimating values within the range of known data points. In the context of machine learning, it refers to predicting or estimating values for data points that fall within the observed range of the training data.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nExtrapolation, on the other hand, involves predicting values for data points that extend beyond the range of the observed data. It\u0026rsquo;s an extension of the model\u0026rsquo;s predictions beyond the range of the training data.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://jiajiexiao.github.io/posts/2024-01-06_how_robust_ai/","summary":"In my previous post, I highlighted the growing influence and adoption of Artificial Intelligence (AI) and machine learning (ML) systems, discussing how they attain \u0026ldquo;intelligence\u0026rdquo; through a careful \u0026ldquo;data diet.\u0026rdquo; However, a fundamental challenge arises from out-of-distribution (OOD), posing barriers to robust performance and reliable deployment. In particular, covariate shift (eq 1) and concept drift (eq 2) are two major types of OOD frequently encountered in practice, demanding mitigation for robust model deployment.","title":"Toward Robust AI (2): How To Achieve Robust AI"},{"content":"Brilliant AI/ML Models Remain Brittle Artificial intelligence (AI) and machine learning (ML) have garnered significant attention for their potential to emulate, and sometimes surpass, human capabilities across diverse domains such as vision, translation, and planning. The popularity of groundbreaking models like ChatGPT and Stable Diffusion has fueled optimism, with many speculating not if, but when, Artificial General Intelligence (AGI) will emerge.\nYet, beneath the in silico surface, AI/ML systems remain at their core parametrized mathematical models. They are trained to transform inputs into predictive outputs, which includes tasks like classification, regression, media generation, data clustering, and action planning. Despite the awe-inspiring results, the deployment of even the most sophisticated models reveals a fundamental fragility.\nThis fragility becomes apparent in terms of unexpected or unreliable predictions. For example, you may have experienced or heard that a chatbot spewing gibberish instead of useful information. This phenomenon is called hallucinations, where the model generates text that is irrelevant or nonsensical concerning the given inputs and desired outputs. Such hallucinations are arguably inevitable in auto-regressive large language models (LLMs).\nThe implications of this fragility are profound, particularly in risk-sensitive applications. Errors from the AI/ML systems can have severe consequences. In healthcare, a misdiagnosis by an AI-powered diagnostic tool or test can lead to severe impacts on patient health and quality of life. Similarly, in autonomous vehicles, a computer vision system\u0026rsquo;s failure to accurately detect objects can result in fatal accidents.\nWhile AI/ML models often demonstrate impressive performance across numerous benchmarks during model development phases, these real-world errors persist. Degradation in performance, along with unforeseen errors, remains a significant challenge. As AI/ML technologies become increasingly integrated into society, the need for robust performance becomes paramount. The tremendous potential of AI/ML must be harnessed responsibly to ensure these models function reliably in the complex and dynamic real-world environment.\nThe Data Diet: How AI/ML Models Learn To understand why AI/ML models can stumble, we need to slightly peek under the hood at how they learn. Think of it like training a personal chef: you provide them with recipes and feedback (labels or rewards), and they gradually figure out how to transform ingredients (inputs) into delicious dishes (outputs). With this analogy, we\u0026rsquo;ll see how major types of AI/ML models learn as below.\nSupervised Learning: The most common approach, where you give the model both features (like image pixels) and labels (like \u0026ldquo;cat\u0026rdquo; or \u0026ldquo;dog\u0026rdquo;). The training process is to update the model parameters in order to reduce the error between the predicted outputs and the groundtruth labels. It\u0026rsquo;s like handing a chef a recipe book with labeled ingredients. While this method offers clarity and precision, acquiring annotated datasets can be costly.\nReinforcement Learning: A trial-and-error approach where the model explores and learns from rewards and punishments. Supervised learning also applies here, as the feedback from the reinforcement learning environment serves as labels, guiding the model to adjust its policy or value-action function for optimal long-term planning. Imagine a chef experimenting with different ingredient combinations without following a recipe and adjusting based on your reactions. That may be challenging since it requires you to taste all experimental dishes and share feedbacks.\nUnsupervised Learning: Unlike supervised learning that finds the relationship between features and labels, unsupervised learning aims to extract inherent structures or patterns from unlabeled data. It\u0026rsquo;s like a chef intuitively discerning flavor profiles and accumulating, free from the constraints of explicit recipes or examination of ingredient labels. Unsupervised methods present their own set of challenges, as models must decipher complex data structures based on simply feature values.\nSelf-Supervised Learning: Cleverly design proxy tasks that help models learn without explicit labels, like masking parts of an image or sentence and asking the model to fill in the blanks. Alternatively, one can also train the model to assess if two augmented versions of an input originate from the same base in the latent projection space, which is also called contrastive learning. These are like challenging a chef to identify mystery ingredients or create dishes from a limited pantry, which trains the chef to understand relationships among ingredients, recipes and dishes. Afterwards, the chef can likely handle more abstract or more creative meal requests from you. The self-supervised learning method eliminates the need for labeled data by using the inherent structure of the data itself, enabling the model to learn a (compressed) representation that captures intrinsic patterns within the inputs. As a result, self-supervised learning becomes more and more popular than classic unsupervised learning these days.\nRegardless of learning methods, in the training process, your AI chef is constantly adjusting their internal recipe book (model parameters) to improve their culinary skills. In other words, across these learning paradigms, a central tenet emerges: based on a set of training data, models continually adapt and refine their configurations, aiming to optimize alignment between their predictions and desired outcomes. But just like any human chef, they can be misled by faulty ingredients or biased information. Compared to the data used for model development, any discrepancies or shifts (i.e. so-called dataset shift (Hein2022)) in the distribution of data encountered during deployment may degrade performance. Unfortunately, as describing more in the next section, such dataset mismatch is common that results in AI/ML model fragility. We\u0026rsquo;ll delve deeper into these challenges, exploring the implications of distributional shifts and charting pathways to bolster AI model resilience.\nCommon yet Tricky Out-Of-Distribution We\u0026rsquo;ve seen that AI/ML models are taught to align the model outputs to desired targets based on a specific set of training data (Fig. 1). This training paradigm helps the model find \u0026ldquo;optimal\u0026rdquo; parameter values, ensuring accurate alignment between predictions and targets. However, the effectiveness of AI/ML models hinges on the similarity between the test data and the training data. In essence, the more congruent the test data is with the training data, the more reliable the model\u0026rsquo;s performance tends to be. This effectiveness pattern is common in machine learning practice.\nFig 1. Illustration of AI/ML Model Learning Process. AI/ML models, represented as parameterized hypothesis functions Hθ, transform inputs X into outputs Hθ(X). Through iterative training and optimization, the parameters θ are adjusted to minimize the discrepancy L between the model\u0026rsquo;s outputs and the target values Y.\nTo explore this phenomenon further, let\u0026rsquo;s delve into the terminologies commonly employed in contemporary literature. The dataset used for training is referred to as the source domain, while the dataset used for testing is termed the target domain (Kouw2018). These datasets are typically categorized as either Independent and Identically Distributed (IID) or Out-of-Distribution (OOD) (Hein2022). It\u0026rsquo;s crucial to understand that the effectiveness pattern mentioned earlier, rooted in a fundamental principle of PAC learning 1, assumes optimal consistency between the test data and the training data (Mohri2018). This alignment of data distribution, often referred to as the IID assumption when deploying predictive models, is a benchmark for reliable model performance. However, real-world scenarios often deviate from this idealized setting, presenting challenges in model generalization for OOD data. For instance, an AI model trained exclusively on standard bacterial DNA might misclassify a novel bacterial species, mistaking it for a known variant, rather than acknowledging uncertainty (Ren2019). Likewise, image classifiers may falter when presented with objects in unfamiliar poses or contexts that deviate from their training data (like a cow on ice (Causality2024)).\nFormally, IID and OOD are commonly defined by assessing the equality between the joint probability distributions of features and labels in both the source and target domains:\n\\begin{equation} \\begin{aligned} \\text{IID:} \\quad P_\\text{S} (X, Y) = P_\\text{T} (X, Y) \\end{aligned} \\end{equation}\n\\begin{equation} \\begin{aligned} \\text{OOD:} \\quad P_\\text{S} (X, Y) \\neq P_\\text{T} (X, Y) \\end{aligned} \\end{equation}\nThis joint distribution can be deconstructed into the conditional probability, denoted as P(Y|X), which encapsulates the relationship between inputs X and targets Y, and the marginal probability P(X), which focuses solely on inputs. OOD scenarios predominantly manifest in two distinct forms 2:\nCovariate Shift: The conditional probability holds fixed across domains but input marginal probabilities differ. This is probably the most prevalent type of for OOD. For example, training data may lack samples for a particular feature range observed at test-time and thus make it hard for the model to reliably infer unseen regimes. (see toy example in Fig2). Covariate shifts are often seen when there are some selection biases or there are batch effects on the data generation processes. Fig 2. Model Behavior under Covariate Shift. In the source domain, data points with x \u0026gt; 2 are absent, whereas the target domain features numerous such instances. Consequently, the model\u0026rsquo;s performance is compromised for x \u0026gt; 2 in the target domain.\nConcept Drift: The conditional probability between inputs and targets itself shifts across domains, even if input distributions look similar. Relationships learned during training fail to transfer (see toy example in Fig3). Concept drift can be seen when there are any changes in mechanistic changes in the data generation process that may be even harder to anticipate in advanced compared to covariate shifts. Fig 3. Model Behavior under Concept Drift. The relationship between x and y evolves across domains, rendering the previously learned model inadequate for the target domain.\nWhile the landscape of OOD encompasses various nuanced scenarios (e.g. both P(Y|X) and P(X) may vary across domains), these two categories cover most common situations. As illustrated in Figs 2 and 3, even basic examples of covariate shift and concept drift can pose challenges. From a mathematical standpoint, it\u0026rsquo;s established that IID ensures consistent performance across both source and target domains. However, achieving such consistency in an OOD context proves more challenging. In moe details, a hypothesis model ℎ\u0026rsquo;s empirical risk 3 in the target domain, denoted as \\( R_{\\text{T}}(h) \\) , can be estimated by the source domain loss ℓ weighted by the ratio between the joint distributions in the target and source domain as below:\n\\begin{equation} \\begin{align*} R_{\\text{T}}(h) \u0026amp;\\equiv \\sum_{y \\in Y_{\\text{T}}} \\int_{\\mathcal{X_{\\text{T}}}} \\ell(h(x), y) P_{\\text{T}}(x, y) dx \\\\\\ \u0026amp;= \\sum_{y \\in Y_{\\text{T}}} \\int_{\\mathcal{X_{\\text{T}}}} \\frac{\\ell(h(x), y) P_{\\text{T}}(x, y)}{P_{\\text{S}}(x, y)} P_{\\text{S}}(x, y) dx \\\\\\ \u0026amp;= \\sum_{y \\in Y_{\\text{T}}} \\int_{\\mathcal{X_{\\text{T}}}} \\ell(h(x), y) P_{\\text{S}}(x,y) \\frac{P_\\text{T}(x, y)}{P_\\text{S}(x, y)} dx \\\\\\ \u0026amp;\\approx \\frac{1}{n} \\sum_{i=1, x_i \\in \\mathcal{X_{\\text{S}}}, y_i \\in Y_{\\text{S}}}^{n} \\ell(h(x_i), y_i) \\frac{P_\\text{T}(x_i, y_i)}{P_\\text{S}(x_i, y_i)}. \\end{align*} \\end{equation}\nAs demonstrated by the equations above, achieving equality between the estimated target risk $\\widehat{R}_{\\text{T}}(h)$ and the estimated source risk \\( \\widehat{R}_{\\text{S}}(h) \\) typically requires \\( P_{\\text{T}}(x, y) = P_{\\text{S}}(x, y) \\) unless \\( \\ell_{\\text{T}}(h(x), y) = \\ell_{\\text{S}}(h(x), y) = 0 \\) .\nIn practice, while OOD scenarios are common, our goal remains: to achieve accurate and robust performance irrespective of whether we\u0026rsquo;re dealing with IID or OOD data. That is the requirement of robust AI/ML regardless of the IID or OOD. Consequently, the pursuit of designing AI/ML models that are resilient to a variety of OOD scenarios is crucial to ensure robust and dependable performance.\nSummary In wrapping up, this post has elucidated the foundational aspects of constructing compelling AI/ML models and shed light on the potential hurdles they encounter, particularly when confronted with OOD data. Understanding these challenges underscores the pressing need for robust AI. Ensuring that our AI systems can handle diverse and unexpected scenarios isn\u0026rsquo;t just a technical challenge—it\u0026rsquo;s crucial for their real-world applicability and trustworthiness. As we look ahead, bolstering AI\u0026rsquo;s resilience will be paramount. Join me in the forthcoming blog post, where we will explore in-depth strategies to fortify AI against these uncertainties and pave the way for more dependable and resilient machine learning solutions.\nCitation If you find this post helpful and are interested in referencing it in your write-up, you can cite it as\nXiao, Jiajie. (Dec 2023). Toward Robust AI Part (1): Why Robustness Matters. JX\u0026rsquo;s log. Available at: https://jiajiexiao.github.io/posts/2023-12-17_why_robust_ai/.\nor add the following to your BibTeX file.\n@article{xiao2023whyrobustness, title = \u0026#34;Toward Robust AI (1): Why Robustness Matters\u0026#34;, author = \u0026#34;Xiao, Jiajie\u0026#34;, journal = \u0026#34;JX\u0026#39;s log\u0026#34;, year = \u0026#34;2023\u0026#34;, month = \u0026#34;Dec\u0026#34;, url = \u0026#34;https://jiajiexiao.github.io/posts/2023-12-17_why_robust_ai/\u0026#34; } References Hein, M., Joaquin Quiñonero-candela, Sugiyama, M., Schwaighofer, A., \u0026amp; Lawrence, N. D. (Eds.). (2022). Dataset Shift in Machine Learning (Neural Information Processing). The MIT Press.\nMohri, M., Rostamizadeh, A. and Talwalkar, A. (2018) Foundations of Machine Learning. Cambridge, MA: The MIT Press. Chapter 2: The PAC Learning Framework, Available at: https://mitpress.ublish.com/ebook/foundations-of-machine-learning--2-preview/7093/9.\nKouw, W. M., \u0026amp; Loog, M. (2018). An introduction to domain adaptation and transfer learning. arXiv preprint arXiv:1812.11806.\nRen, J., Liu, P. J., Fertig, E., Snoek, J., Poplin, R., Depristo, M., \u0026hellip; \u0026amp; Lakshminarayanan, B. (2019). Likelihood ratios for out-of-distribution detection. Advances in neural information processing systems, 32.\nCausality for Machine Learning. Chapter 3: Causality and Invariance, Retrieved December 17, 2024, from https://ff13.fastforwardlabs.com/#how-irm-works.\nPAC learning stands for Probable Approximately Correct (PAC) learning framework, which is a foundational concept in computational learning theory that provides guarantees on the generalization performance of a learner.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe joint distribution of P(X, Y) can also be expressed in terms of P(X|Y) and P(Y). Thus, literature sometimes also mentions a third OOD scenario called label shift, meaning the P(Y) varies across domains while P(X|Y) stays stable.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nEmpirical risk is a measure of the average loss incurred by a hypothesis model ℎ on a given dataset. In simpler terms, it quantifies how well a hypothesis fits the observed data. In a broader sense, the risk of a hypothesis ℎ is the expected loss it will incur when applied to new, unseen data, drawn from the underlying distribution. This is a measure of how well the hypothesis generalizes to new data. The empirical risk serves as an estimate or proxy for the true risk. When we train a model on a finite dataset, we compute its empirical risk to assess its performance on that dataset (Kouw2018).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://jiajiexiao.github.io/posts/2023-12-17_why_robust_ai/","summary":"Brilliant AI/ML Models Remain Brittle Artificial intelligence (AI) and machine learning (ML) have garnered significant attention for their potential to emulate, and sometimes surpass, human capabilities across diverse domains such as vision, translation, and planning. The popularity of groundbreaking models like ChatGPT and Stable Diffusion has fueled optimism, with many speculating not if, but when, Artificial General Intelligence (AGI) will emerge.\nYet, beneath the in silico surface, AI/ML systems remain at their core parametrized mathematical models.","title":"Toward Robust AI (1): Why Robustness Matters"},{"content":"Greetings! This is JJ, and I am thrilled to welcome you to my corner of the internet! Taking inspiration from Lilian Weng, whose blog has been an invaluable resource during my studies and work in AI/ML, I\u0026rsquo;ve decided to also share my learning notes, thoughts, and updates through here.\nWhy Blogging? While I used to constantly write some diary during my childhood, I have to admit that I haven\u0026rsquo;t done so for quite a while. Blogging on this site, for me, it may be more than just a digital diary. I hope to crystallize my thoughts, document my learning experiences, and engage in meaningful conversations with readers.\nLearning from the Best In aspiring to emulate the dedication and passion that Lilian brings to her work, I\u0026rsquo;ve also been influenced by a conversation with Xingyou Song. Our discussion, held in front of DeepMind\u0026rsquo;s booth at 2023 ICML, encouraged me to consider blogging as a medium for sharing practical insights. In my employment history so far, publishing the research and development work that I lead and contribute has not been an organizational priority or highly restricted. I see blogging as a means to contribute to the research community while navigating the intricate landscape of addressing urgent medical needs, such as early cancer diagnosis and therapeutic intervention.\nWhat to Expect This blog is a personal expression and does not reflect the opinions or positions of my current or former employers. I am committed to avoiding any disclosure of sensitive information from my professional engagements. Despite these constraints, I\u0026rsquo;m enthusiastic to log a diverse mix of content, encompassing my learning and experiences in AI/ML, insights from the intersection of technology and science, and reflections on the challenges and triumphs of bridging these two dynamic worlds. I might also throw in some random, fun tidbits. Stay tuned!\n","permalink":"https://jiajiexiao.github.io/posts/2023-12-03_hello_world/","summary":"Greetings! This is JJ, and I am thrilled to welcome you to my corner of the internet! Taking inspiration from Lilian Weng, whose blog has been an invaluable resource during my studies and work in AI/ML, I\u0026rsquo;ve decided to also share my learning notes, thoughts, and updates through here.\nWhy Blogging? While I used to constantly write some diary during my childhood, I have to admit that I haven\u0026rsquo;t done so for quite a while.","title":"Hello World"},{"content":"Hi 👋, I'm Jiajie \"JJ\" Xiao. Thank you for visiting my personal website and taking an interest in my journey.\nI am passionate about contributing to a better world through the lens of science and technology. Currently, I serve as a Staff Machine Learning Scientist at Freenome, where I work on multi-domain (e.g. multiomics, EHR) models to facilitate sensitive and specific blood-based early cancer diagnosis. My expertise also extends to therapeutic development such as ML-guided protein design and drug discovery, gained through my experiences at GSK and WFU.\nI specialize in adapting state-of-the-art AI/ML advancements to navigate challenges posed by various types of high-dimensional and noisy data, thereby driving data-informed decision-making. Described as a fast learner, active researcher, and collaborative servant leader, I thrive on addressing complex, real-world problems with cross-functional teams. I am committed to using my expertise to make a positive impact on people\u0026rsquo;s lives.\nResearch Interests As a physicist with interest in mitigating human suffering from diseases, I came across multidisciplinary areas such computational biophysics, chemistry and biology. I have been investigating microscopic system through molecular dynamics studies as well as the macroscopic one in population-wise genomic discovery.\nMy journey into machine learning began in the middle of my PhD in Physics and has since become a focal point in my recent endeavors. Presently, my research is concentrated on applying advanced machine learning methodologies to tackle pressing medical challenges. I find joy in the process of researching on cutting-edge AI/ML and their applications that facilitate life-saving innovations. I am motivated by the potential impact of my research on AI4Science.\nMy AI/ML research areas include:\nDomain Generalization and Representation Learning Generative Modeling and Reinforcement Learning Interpretability and Safety ","permalink":"https://jiajiexiao.github.io/about/","summary":"Hi 👋, I'm Jiajie \"JJ\" Xiao. Thank you for visiting my personal website and taking an interest in my journey.\nI am passionate about contributing to a better world through the lens of science and technology. Currently, I serve as a Staff Machine Learning Scientist at Freenome, where I work on multi-domain (e.g. multiomics, EHR) models to facilitate sensitive and specific blood-based early cancer diagnosis. My expertise also extends to therapeutic development such as ML-guided protein design and drug discovery, gained through my experiences at GSK and WFU.","title":""}]